.#   Java chassis template

.targetDir = "xmscommon/generated"
.directory.create (targetDir)

.for class by index
.    for method
.        cSharpClassName = getCSharpClassName("$(class.Name)$(method.Name)Body")
.        open_output ("$(targetDir)/$(cSharpClassName).cs")
using jpmorgan.mina.common;
using System;
using System.Text;

namespace OpenAMQ.Framing
{



///
/// <summary>This class is autogenerated
/// Do not modify.
/// </summary>
/// @author Code Generator Script by robert.j.greig@jpmorgan.com
public class $(cSharpClassName) : $(method.framingSuperclass) , IEncodableAMQDataBlock
{
.        for field by index where !field.global
 public $(field.cstype:no) $(field.csname:no);
.        endfor

protected override ushort Clazz
{
    get
    {
        return $(class.index);
    }
}
   
protected override ushort Method
{
    get
    {
        return $(method.index);
    }
}


protected override uint BodySize
{
    get
    {
        return (uint) (
.        size = 0
.        for field where !field.global
            $(field.encodedSize) +
.        endfor
        0);
    }
}

protected override void WriteMethodPayload(ByteBuffer buffer)
{
.   for field where !field.global
        $(field.encodeMethod)
.   endfor 
}

protected override void PopulateMethodBodyFromBuffer(ByteBuffer buffer)
{
.   for field where !field.global
        $(field.decodeMethod);
.   endfor

}

public override string ToString()
{
    StringBuilder buf = new StringBuilder(base.ToString());
.   for field where !field.global
        buf.Append("\\n\\t$(field.csname:no): ").Append(String.Format("s", $(field.csname:no)));
.   endfor    
    return buf.ToString();
}

public static AMQFrame CreateAMQFrame(ushort channelId 
.   for field where !field.global
,$(field.cstype:no) $(field.csname:no)
.   endfor
)
{
    $(cSharpClassName) body = new $(cSharpClassName)();
.   for field where !field.global
    body.$(field.csname:no) = $(field.csname:no);
.   endfor
    AMQFrame frame = new AMQFrame();
    frame.Channel = channelId;
    frame.BodyFrame = body;
    return frame;
}
}
} // end namespace
.    endfor
.endfor

.close

.  cSharpClassName = "MethodBodyDecoderRegistry"
.  open_output ("$(targetDir)/$(cSharpClassName).cs")
using System;
using System.Collections;
using jpmorgan.mina.common;
using log4net;

namespace OpenAMQ.Framing
{


///
/// <summary>This class is autogenerated
/// Do not modify.
/// </summary>
/// @author Code Generator Script by robert.j.greig@jpmorgan.com

public class $(cSharpClassName)
{
private static readonly ILog _log = LogManager.GetLogger(typeof($(cSharpClassName)));

private static readonly Hashtable _classMethodProductToMethodBodyMap = new Hashtable();

static $(cSharpClassName)()
{
.for class by index
.    for method
. decoderClassName = getCSharpClassName("$(class.Name)$(method.Name)Body")
. magicNumber = class.index * 1000 + method.index
_classMethodProductToMethodBodyMap[$(magicNumber)] = typeof($(decoderClassName));
.    endfor
.endfor
}

public static AMQMethodBody Get(ushort clazz, ushort method)
{
	Type bodyClass = (Type) _classMethodProductToMethodBodyMap[clazz * 1000 + method];
	if (bodyClass != null)
	{
	    try
	    {
	        return (AMQMethodBody) Activator.CreateInstance(bodyClass);
	    }
	    catch (Exception e)
	    {
	    	throw new AMQFrameDecodingException(_log, "Unable to instantiate body class for class " + clazz + " and method " + method + ": " + e, e);
	    }
	}
	else
	{
	    throw new AMQFrameDecodingException(_log, "Unable to find a suitable decoder for class " + clazz + " and method " + method);
	}    
}
}
} // end namespace