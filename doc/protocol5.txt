Conformance Tests
*****************

Introduction
============

The AMQP conformance tests are designed to verify how far an AMQ server
actually conforms to the specifications laid out in this document. In
principle, every "guideline for implementors" has a specific test that
verifies whether the server conforms or not.  In practice, some of the
guidelines are intended for clients, and some are not testable without
excessive cost.

The conformance test suite is provided as a separate package. In this
chapter we detail each test so that the reader can understand how the
test process works.

Note that we do not test performance, stability, or scalability. The
scope of the conformance tests is to measure how far an AMQ server is
compatible with the protocol specifications, not how well it is built.

Design
======

Wire-Level Tests
----------------

The wire-level tests check how the server:

 1. Accepts the various types of valid data that the wire-level
    protocol defines, including frames, structured content, etc.

 2. Handles incorrect data, e.g. malformed frames, incomplete
    content, etc.

Functional Tests
----------------

The functional tests check how the server:

 1. Implements mandatory functionality, which is expressed in the
    specifications as "MUST" and "MUST NOT".
    
 2. Implements recommended functionality, which is expressed in the
    specifications as "SHOULD".
   
 3. Implements optional functionality, which is expressed in the
    specifications as "MAY".

 4. Handles limits, when the client creates excessive numbers of
    entities such as queues, consumers, etc.

 5. Handles entity life-cycles: that deleted entities properly
    disappear, etc.
    
Technical Implementation
========================

The test cases are written using the PAL language, which is part of the
ASL toolset we used to design and construct AMQP. The OpenAMQ reference
implementation contains these tools along with the XML documents used to
specify the protocol and test cases.

The PAL language is scripting language that directly implements the high
level AMQP API.  Each script starts a server process, runs one or more
tests, and then stops the server process.

The tests are designed as assertions.  That is, each test either succeeds
silently, or exits with an assertion if it failed.

The tests are run in sequence, and their success/failure status provides
an overall report of the level of implementation of the server.

Detailed Specifications
=======================

amq_default_01.pal: Test default JMS queue/exchange declarations using consume.
amq_default_02.pal: Test default basic queue/exchange declarations using consume.
amq_default_03.pal: Test default basic queue/exchange declarations using get.
amq_default_04.pal: Test default jms queue/exchange declarations using get.
amq_exchange_01.pal: Declare an exchange with default options.
amq_exchange_02.pal: Declare an exchange which is automatically deleted, and test deletion..
amq_exchange_03.pal: Declare an exchange which is durable and test if it survives a server restart.
amq_exchange_04.pal: Declare a exchange which is exclusive and test is cannot be used in another connection.
amq_exchange_05.pal: Test the exchange passive declaration and response.
amq_exchange_09.pal: Declare exchange with illegal name.
amq_exchange_10.pal: Delete an exchange.
amq_exchange_11.pal: Delete an unknown exchange.
amq_exchange_12.pal: Delete an exchange with if_unused = 1 and it's not in use (unbound).
amq_exchange_13.pal: Delete an exchange with if_unused = 1 and it's in use (bound).
amq_queue_01.pal: Declare a queue with default options.
amq_queue_02.pal: Declare a queue which is automatically deleted and test if it gets deleted.
amq_queue_03.pal: Declare a queue which is durable and test if it survives a server restart.
amq_queue_04.pal: Declare a queue which is exclusive and test is cannot be used in another connection.
amq_queue_05.pal: Test the queue passive declaration and response.
amq_queue_09.pal: Declare a queue with default options, but an illegal name.
amq_queue_10.pal: Declare a queue with no name..
amq_queue_11.pal: Bind a queue to an exchange.
amq_queue_12.pal: Bind a durable queue to a transient exchange.
amq_queue_13.pal: Bind a durable queue to a durable exchange.
amq_queue_14.pal: Bind to an unknown exchange.
amq_queue_15.pal: Purge a queue.
amq_queue_16.pal: Purge a queue which is non existant.
amq_queue_17.pal: Purge a queue with a ticket using no ticket.
amq_queue_18.pal: Purge a queue with a ticket using a faulty ticket.
amq_queue_19.pal: Purge a queue with a ticket using a correct ticket.
amq_queue_20.pal: Delete a queue.
amq_queue_21.pal: Delete a queue which is non existant.
amq_queue_22.pal: Delete a queue with a ticket using no ticket.
amq_queue_23.pal: Delete a queue with a ticket using a faulty ticket.
amq_queue_24.pal: Delete a queue with a ticket using a correct ticket.
amq_queue_25.pal: Check duplicates bindings are ignored.
amq_queue_26.pal: Bind with an unknown queue.
amq_queue_27.pal: Delete a non empty queue using the if_empty flag.
amq_queue_28.pal: Delete an empty queue using the if_empty flag.
amq_queue_29.pal: Delete a consumed queue using the if_unused flag.
amq_queue_30.pal: server MUST respect the if-unused flag when deleting a queue.
amq_queue_31.pal: server MUST ignore auto-delete flag if queue already exists.
amq_wlp_content_01.pal: the server MUST handle incomplete contents.
amq_wlp_content_02.pal: the server MUST validate the content class-id.
amq_wlp_content_03.pal: the server MUST reject content frames with channel zero.
amq_wlp_content_04.pal: the server MAY support structured content.
amq_wlp_content_05.pal: the server MUST validate the content structure.
amq_wlp_frame_01.pal: the server MUST handle incorrect frame types correctly.
amq_wlp_frame_02.pal: the server MUST handle malformed frames correctly.
amq_wlp_frame_03.pal: the server MUST handle over-sized frames.
amq_wlp_header_01.pal: the server MUST accept the AMQP/Fast protocol.
amq_wlp_header_02.pal: the server MAY accept non-AMQP protocols.
amq_wlp_header_03.pal: the server MUST validate the "AMQP" protocol header string.
amq_wlp_header_04.pal: the server MUST returns a protocol header on connection failure.
amq_wlp_heartbeat_01.pal: the server MUST detect invalid heartbeat frame.
amq_wlp_heartbeat_02.pal: the server MUST accept valid heartbeat frames.
amq_wlp_table_01.pal: the server SHOULD validate table field names.
amq_wlp_trace_01.pal: the server MUST detects invalid trace frames.
amq_wlp_trace_02.pal: the server MUST accept valid trace frames.

