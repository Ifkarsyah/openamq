Programming

- WireAPI specification
- PAL 
- Worked examples
- Other languages

Internals

- Console API
- AMQP guide

failover
    - scenarios
    - pal example
    - c client code
    - configuration
    - debugging
    - examples
    - tuning
    
federation
    - scenarios
    - pal examples
    - configuration
    - debugging
    - examples


testing federation
    - two brokers, parent and child
    subsciber test:
        - attach amq.test.subscriber (topic) to parent
        - consume at child
        - consume at parent
        - publish to parent
            - expect messages to arrive at parent
            - expect messages to arrive at child
        - publish to child
            - expect messages to arrive at child 
    publisher test:
        - attach amq.test.publisher (topic) to parent
        - consume at child
        - consume at parent
        - publish to parent
            - expect messages to arrive at parent
        - publish to child
            - expect messages to arrive at parent
            - expect messages to arrive at child 
    locator test:
        - attach amq.test.locator (direct) to parent
        - consume at child
        - consume at parent
        - publish to parent
            - expect messages to arrive at parent
        - publish to child
            - expect messages to arrive at child 
    fanout test:
        - attach amq.test.fanout (topic) to parent
        - consume at child
        - consume at parent
        - publish to parent
            - expect messages to arrive at parent
            - expect messages to arrive at child 
        - publish to child
            - expect messages to arrive at parent
            - expect messages to arrive at child 
    service test:
        - attach amq.test.service (direct) to parent
        - consume at child
        - consume at parent
        - publish to parent
            - expect messages to arrive at parent
        - publish to child
            - expect messages to arrive at child 
    
<federate
    exchange = "pattern" 
  [ attach = "name[:port]" ]
  [ type = "service | data | subscriber | publisher | locator" ]
  [ vhost = "path" ]
  [ login = "userid" ]
  />

  --attach specifies default host for federation and enables
  auto-federation

  amq.service, amq.dataex, amq.data are always enabled for
  auto-federation

  Other exchanges can be enabled using <federate exchange = "*" />

  <federate> definitions are processed sequentially, first that
  matches an exchange name will be used for that exchange.

  Default federation type is 'service' for direct exchanges and 
  'fanout' for all others.

  Internal, default, and system exchanges are never federated.
  
  
  
- vhost checked on all connections, not just failover
- queue_set_max as configurable option

- test cases for all federation types
- provoke service error 530

