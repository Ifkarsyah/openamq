#!/bin/sh
# OpenAMQ tests script
# Copyright (c) 2004-2005 JPMorgan and iMatix Corporation
#
# See: readme.txt
#

# Verbose sxitch
verbose=0
# Global error status
error=0


# Abort a test after TIMELIMIT has elapsed
timelimit=300
timeout() 
{
    sleep $timelimit
    killhard $2
    echo 1 > AMQPTEST_TIMEOUT
}

# Kills processes the hard way ...
killhard() 
{
    disown $1
    kill -9 $1
}

# Try to do some clean-up
cleanup()
{
    if test -f AMQPTEST_PIDS; then
        kill -9 $(cat AMQPTEST_PIDS)
    fi
    rm -f AMQPTEST_TIMEOUT
    rm -f AMQPTEST_FAIL
    rm -f AMQPTEST_PIDS
    if test "$1" = "user"; then
        echo ""
        echo "Tests interrupted by user."
        exit 0
    fi
}

# Handle a failure
fail() 
{
    echo "[FAIL] $1"
    if test "$verbose" = "1"; then
        tail $2
    fi
}


# Handle a pass
pass() 
{
    echo "[PASS] $1"
    if test "$verbose" = "1"; then
        tail $2
    fi
}


# Run a script
runscript() 
{
    env PATH="$PATH:$IBASE/bin" sh $1 >$2 2>&1
    status=$?
    if test "$status" != "0"; then
        echo 1 > AMQPTEST_FAIL
    fi    
}


# Run a test script
runtest()
{
    # Run a test
    fail=0
    OUTPUT="$1.out"
    runscript $1 $OUTPUT &
    pid=$!
    # Handle timeout
    timeout $OUTPUT $pid &
    killer=$!
    echo "$pid" >> AMQPTEST_PIDS
    echo "$killer" >> AMQPTEST_PIDS
    wait $pid
    killhard $killer
    if test -f AMQPTEST_FAIL; then
        fail=1
    fi
    # Check result
    if test -f AMQPTEST_TIMEOUT; then
        error=1
        fail $1 $OUTPUT
        echo "FAIL: TIMEOUT" >> $OUTPUT 
        mv "$OUTPUT" "$1.timeout"
    elif test -f core; then
        error=1
        fail $1 $OUTPUT
        echo "FAIL: CORE" >> $OUTPUT 
        mv core "$1.core"
        mv "$OUTPUT" "$1.fail"
    elif test ! -f "$1.ok"; then
        if test "$fail" = "0"; then
            pass $1 $OUTPUT
        else
            error=1
            fail $1 $OUTPUT
            echo "FAIL: EXIT STATUS" >> $OUTPUT 
            mv "$OUTPUT" "$1.fail"
        fi
    elif cmp -s "$OUTPUT" "$1.ok"; then
        pass $1 $OUTPUT
    else
        error=1
        fail $1 $OUTPUT
        echo "FAIL: UNEXPECTED RESULTS" >> $OUTPUT 
        mv "$OUTPUT" "$1.fail"
    fi
}


# Run a test set
testset()
{
    rm -f AMQPTEST_TIMEOUT
    rm -f AMQPTEST_FAIL
    rm -f AMQPTEST_PIDS
    for a_test in $(find -name 'test_*.sh' -maxdepth 1); do
        if test "$a_test" != "test_*.sh"; then 
            echo ""
            echo "[TEST] $a_test"
            runtest "$a_test"
            rm -f AMQPTEST_TIMEOUT
            rm -f AMQPTEST_FAIL
            rm -f AMQPTEST_PIDS
        else
            if test "$2" != "1"; then
                echo "!! Nothing to do for $1" 
            fi
        fi
    done
}


# Trap Control-c
trap "cleanup user" SIGINT

# Check arguments
if test "$1" = "-h"; then 
    echo "OpenAMQP tester"
    echo ""
    echo "Copyright (c) 2004-2005 JPMorgan"
    echo "This is free software; see the source for copying conditions.  There is NO"
    echo "warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
    echo ""
    echo "Provisional syntax: run_tests [options...]"
    echo "Options:"
    echo  "  -h               Show summary of command-line options"
    echo  "  verbose|quiet    Print to console the last lines of output (default = quiet)"
    echo  "  timeout          The number of seconds to wait before a timeout failure triggers (default = 300)"
    echo ""      
    echo "The order of arguments IS important (provisionally). Switches and filenames" 
    echo "are case sensitive."
    exit 0
else
    if test "$1" = "verbose"; then 
        verbose=1 
    fi    
    if test "$2" != ""; then 
        timelimit=$2 
    fi
fi    


# Start the daemon
if ps -A | grep openamqd; then
    echo "OpenAMQ daemon found running..."
else 
    echo "Starting the OpenAMQ daemon..."
    cd ../servers/
    ./openamqd &
    cd ../tests/
    if test "$?" != "0"; then
        echo "Warning, could not start the OpenAMQ daemon."
    fi
    sleep 5
fi


# Run all test sets
for test_dir in tests_*; do
    if test "$test_dir" != "tests_*"; then 
        echo ""
        echo ">> Entering $test_dir directory..."
        cd $test_dir
        if test -f $test_dir; then
            sh $test_dir
        fi    
        if test ! -f $test_dir -o "$?" = "0"; then
            testset $test_dir $subs
            subs=0
            for test_subdir in tests_*; do
                if test "$test_subdir" != "tests_*"; then 
                    subs=1
                    echo ""
                    echo "  >> Entering $test_subdir subdirectory..."
                    cd $test_subdir
                    if test -f $test_subdir; then
                        sh $test_subdir
                    fi    
                    if test ! -f $test_subdir -o "$?" = "0"; then
                        testset $test_subdir
                    else    
                       echo ""
                       echo "  ** Skiping test subset $1" 
                    fi
                    cd ..
                    echo ""
                    echo "  << Leaving $test_subdir directory..."
                fi
            done
        else
            echo ""
            echo "** Skiping test set $1" 
        fi
        cd ..
        echo ""
        echo "<< Leaving $test_dir directory..."
    fi
done


# Result
exit $error
