.#--------------------------------------------------------------------
.#   Codebot for AMQP Wireshark dissector plug-in
.#
.#   Copyright (c) 1996-2007 iMatix Corporation
.#
.#   This program is free software; you can redistribute it and/or modify
.#   it under the terms of the GNU General Public License as published by
.#   the Free Software Foundation; either version 2 of the License, or (at
.#   your option) any later version.
.#
.#   This program is distributed in the hope that it will be useful, but
.#   WITHOUT ANY WARRANTY; without even the implied warranty of
.#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.#   General Public License for more details.
.-----------------------------------------------------------------------
.
.macro add_field_format (prefix, group)
.   type = field.type ? amqp->domain (name = field.domain).type
.   if type <> "bit"
.       bitoffset = 1
.   endif
    {&hf_amqp_$(my.prefix)_$(field.name:c), {
        "$(field.name:neat)", "amqp.method.$(my.group).$(field.name:lower,c)",
.   if type = "bit"
        FT_BOOLEAN, 8, NULL, 0x$(bitoffset%02x),
.       bitoffset = bitoffset * 2
.   elsif type = "octet"
        FT_UINT8, BASE_DEC, NULL, 0,
.   elsif type = "short"
         FT_UINT16, BASE_DEC, NULL, 0,
.   elsif type = "long"
        FT_UINT32, BASE_DEC, NULL, 0,
.   elsif type = "longlong"
        FT_UINT64, BASE_DEC, NULL, 0,
.   elsif type = "timestamp"
        FT_UINT64, BASE_DEC, NULL, 0,
.   elsif type = "shortstr"
        FT_STRING, BASE_NONE, NULL, 0,
.   elsif type = "longstr"
        FT_BYTES, BASE_NONE, NULL, 0,
.   elsif type = "table"
        FT_NONE, BASE_NONE, NULL, 0,
.   endif
        "$(field.name)", HFILL}},
.endmacro
.
.macro add_field (prefix, tree)
.   type = field.type ? amqp->domain (name = field.domain).type
.   if type <> "bit"
.       if bitoffset <> 1
    AMQP_INCREMENT(offset, 1, bound);
.       endif
.       bitoffset = 1
.   endif
    /*  $(field.name) ($(type))  */
.   if type = "bit"
    proto_tree_add_item($(my.tree), hf_amqp_$(my.prefix)_$(field.name:c),
        tvb, offset, 1, FALSE);
.       bitoffset = bitoffset * 2
.       if bitoffset = 256
.           bitoffset = 1
    AMQP_INCREMENT(offset, 1, bound);
.       endif
.   elsif type = "octet"
    proto_tree_add_item($(my.tree), hf_amqp_$(my.prefix)_$(field.name:c),
        tvb, offset, 1, FALSE);
    AMQP_INCREMENT(offset, 1, bound);
.   elsif type = "short"
    proto_tree_add_item($(my.tree), hf_amqp_$(my.prefix)_$(field.name:c),
        tvb, offset, 2, FALSE);
    AMQP_INCREMENT(offset, 2, bound);
.   elsif type = "long"
    proto_tree_add_item($(my.tree), hf_amqp_$(my.prefix)_$(field.name:c),
        tvb, offset, 4, FALSE);
    AMQP_INCREMENT(offset, 4, bound);
.   elsif type = "longlong"
    proto_tree_add_item($(my.tree), hf_amqp_$(my.prefix)_$(field.name:c),
        tvb, offset, 8, FALSE);
    AMQP_INCREMENT(offset, 8, bound);
.   elsif type = "timestamp"
    proto_tree_add_item($(my.tree), hf_amqp_$(my.prefix)_$(field.name:c),
        tvb, offset, 8, FALSE);
    AMQP_INCREMENT(offset, 8, bound);
.   elsif type = "shortstr"
    proto_tree_add_item($(my.tree), hf_amqp_$(my.prefix)_$(field.name:c),
        tvb, offset + 1, tvb_get_guint8(tvb, offset), FALSE);
    AMQP_INCREMENT(offset, 1 + tvb_get_guint8(tvb, offset), bound);
.   elsif type = "longstr"
    proto_tree_add_item($(my.tree), hf_amqp_$(my.prefix)_$(field.name:c),
        tvb, offset + 4, tvb_get_ntohl(tvb, offset), FALSE);
    AMQP_INCREMENT(offset, 4 + tvb_get_ntohl(tvb, offset), bound);
.   elsif type = "table"
    ti = proto_tree_add_item(
        $(my.tree), hf_amqp_$(my.prefix)_$(field.name:c),
        tvb, offset + 4, tvb_get_ntohl(tvb, offset), FALSE);
    dissect_amqp_field_table (tvb, offset + 4,
        offset + 4 + tvb_get_ntohl(tvb, offset), tvb_get_ntohl(tvb, offset), ti);
    AMQP_INCREMENT(offset, 4 + tvb_get_ntohl(tvb, offset), bound);
.   endif

.endmacro
.
.output "packet-amqp.c"

/* packet-amqp.c
 *
 * AMQP v$(amqp.major)-$(amqp.minor) Wireshark dissector plug-in
 *
 * Author: Martin Sustrik <sustrik@imatix.com>
 *
 * Copyright (c) 1996-2007 iMatix Corporation
 *
 * Wireshark - Network traffic analyzer
 * By Gerald Combs <gerald@wireshark.org>
 * Copyright 1998 Gerald Combs
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

#ifdef HAVE_CONFIG_H
#    include "config.h"
#endif

#include <gmodule.h>
#include <glib.h>
#include <epan/packet.h>
#include <epan/emem.h>
#include <epan/dissectors/packet-tcp.h>
#include <epan/prefs.h>

/*  Generic data  */

static int amqp_port = 5672;

/*  Generic defines  */

#define AMQP_INCREMENT(offset, addend, bound) {\\
    int tmp;\\
    tmp = offset;\\
    offset += (addend);\\
    DISSECTOR_ASSERT(offset >= tmp && offset <= bound);\\
}

#define AMQP_FRAME_TYPE_METHOD                                    1
#define AMQP_FRAME_TYPE_CONTENT_HEADER                            2
#define AMQP_FRAME_TYPE_CONTENT_BODY                              3
#define AMQP_FRAME_TYPE_OOB_METHOD                                4
#define AMQP_FRAME_TYPE_OOB_CONTENT_HEADER                        5
#define AMQP_FRAME_TYPE_OOB_CONTENT_BODY                          6
#define AMQP_FRAME_TYPE_TRACE                                     7
#define AMQP_FRAME_TYPE_HEARTBEAT                                 8

.for class
#define AMQP_CLASS_$(class.name:c,upper)                          $(class.index)
.endfor

.for class
.    for method
#define AMQP_METHOD_$(class.name:c,upper)_$(method.name:c,upper)  $(method.index)
.    endfor

.endfor
/*  Registration functions for the dissector  */

void
proto_register_amqp(void);

void
proto_reg_handoff_amqp(void);

/*  Private functions  */

static void
dissect_amqp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree);

static guint
get_amqp_message_len(packet_info *pinfo, tvbuff_t *tvb, int offset);

static void
dissect_amqp_field_table(tvbuff_t *tvb, int offset, int bound, size_t length, proto_item *item);

static void
dissect_amqp_frame(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree);

.for class
.    for method
static size_t
dissect_amqp_method_$(class.name:c)_$(method.name:c)(tvbuff_t *tvb,
    int offset, int bound, proto_tree *args_tree);

.    endfor
.endfor
.for class where count (field) > 0
static size_t
dissect_amqp_content_header_$(class.name:c)(tvbuff_t *tvb,
    int offset, int bound, proto_tree *prop_tree);

.endfor
/*  Various handles  */

static int proto_amqp = -1;

static int hf_amqp_type = -1;
static int hf_amqp_channel = -1;
static int hf_amqp_length = -1;
static int hf_amqp_method_class_id = -1;
.for class
static int hf_amqp_method_$(class.name:c)_method_id = -1;
.endfor
static int hf_amqp_method_arguments = -1;
.for class
.    for method
.        for field
static int hf_amqp_method_$(class.name:c)_$(method.name:c)_$(field.name:c) = -1;
.        endfor
.    endfor
.endfor
static int hf_amqp_field = -1;
static int hf_amqp_header_class_id = -1;
static int hf_amqp_header_weight = -1;
static int hf_amqp_header_body_size = -1;
static int hf_amqp_header_property_flags = -1;
static int hf_amqp_header_properties = -1;
.for class
.   for field
static int hf_amqp_header_$(class.name:c)_$(field.name:c) = -1;
.   endfor
.endfor
static int hf_amqp_payload = -1;
static int hf_amqp_init_protocol = -1;
static int hf_amqp_init_id_major = -1;
static int hf_amqp_init_id_minor = -1;
static int hf_amqp_init_version_major = -1;
static int hf_amqp_init_version_minor = -1;

static gint ett_amqp = -1;
static gint ett_args = -1;
static gint ett_props = -1;
static gint ett_field_table = -1;
static gint ett_amqp_init = -1;

/*  Various enumerations  */

static const value_string amqp_frame_types [] = {
    {AMQP_FRAME_TYPE_METHOD,             "Method"},
    {AMQP_FRAME_TYPE_CONTENT_HEADER,     "Content header"},
    {AMQP_FRAME_TYPE_CONTENT_BODY,       "Content body"},
    {AMQP_FRAME_TYPE_OOB_METHOD,         "OOB Method"},
    {AMQP_FRAME_TYPE_OOB_CONTENT_HEADER, "OOB Content header"},
    {AMQP_FRAME_TYPE_OOB_CONTENT_BODY,   "OOB Content body"},
    {AMQP_FRAME_TYPE_TRACE ,             "Trace"},
    {AMQP_FRAME_TYPE_HEARTBEAT,          "Heartbeat"},
    {0, NULL}
};

static const value_string amqp_method_classes [] = {
.for class
    {$(class.index), "$(class.name:neat)"},
.endfor
    {0, NULL}
};

.for class
static const value_string amqp_method_$(class.name:c)_methods [] = {
.    for method
    {$(method.index), "$(method.name:neat)"},
.    endfor
    {0, NULL}
};

.endfor
/*  Main dissection routine  */

static void
dissect_amqp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
{
    /*  Minimal frame size is 8 bytes - smaller frames are malformed  */
    DISSECTOR_ASSERT (tvb_length (tvb) >= 8);

    tcp_dissect_pdus(tvb, pinfo, tree, TRUE, 7,
        get_amqp_message_len, dissect_amqp_frame);
}

static guint
get_amqp_message_len(packet_info *pinfo _U_, tvbuff_t *tvb, int offset)
{
    /*  Heuristic - protocol initialisation frame starts with 'AMQP'  */
    if (tvb_get_guint8(tvb, 0) == 'A' &&
          tvb_get_guint8(tvb, 1) == 'M' &&
          tvb_get_guint8(tvb, 2) == 'Q' &&
          tvb_get_guint8(tvb, 3) == 'P')
        return 8;

    return (guint) tvb_get_ntohl(tvb, offset + 3) + 8;
}

/*  Dissection routine for AMQP field tables  */

static void
dissect_amqp_field_table(tvbuff_t *tvb, int offset, int bound, size_t length, proto_item *item)
{
    proto_item *field_table_tree;
    char *buff;
    size_t namelen, vallen;
    guint8 type;
    const char *name;
    const char *typename;
    const char *value;
    size_t field_start;

    buff = ep_alloc(64);

    field_table_tree = proto_item_add_subtree(item, ett_amqp);

    while (length > 0) {
        field_start = offset;
        namelen = tvb_get_guint8(tvb, offset);
        AMQP_INCREMENT(offset, 1, bound);
        length -= 1;
        name = (char*) tvb_get_ephemeral_string(tvb, offset, namelen);
        AMQP_INCREMENT(offset, namelen, bound);
        length -= namelen;
        type = tvb_get_guint8(tvb, offset);
        AMQP_INCREMENT(offset, 1, bound);
        length -= 1;
        switch (type) {
        case 'S':
            typename = "string";
            vallen = tvb_get_ntohl(tvb, offset);
            AMQP_INCREMENT(offset, 4, bound);
            length -= 4;
            value = (char*) tvb_get_ephemeral_string(tvb, offset, vallen);
            AMQP_INCREMENT(offset, vallen, bound);
            length -= vallen;
            break;
        case 'I':
            typename = "integer";
            g_snprintf(buff, 64, "%ld", (long) tvb_get_ntohl(tvb, offset));
            value = buff;
            AMQP_INCREMENT(offset, 4, bound);
            length -= 4;  
            break;
        case 'D':
            typename = "decimal";
            value = "...";
            AMQP_INCREMENT(offset, 5, bound);
            length -= 5; 
            break;
        case 'T':
            typename =  "timestamp";
            value = "...";
            AMQP_INCREMENT(offset, 8, bound);
            length -= 8; 
            break;
        case 'F':
            /*  TODO: make it recursive here  */
            typename =  "field table";
            vallen = tvb_get_ntohl(tvb, offset);
            AMQP_INCREMENT(offset, 4, bound);
            length -= 4;
            value = "...";
            AMQP_INCREMENT(offset, vallen, bound);
            length -= vallen;
            break;
        case 'V':
            typename = "void";
            value = "";
        default:
            typename = "";
            value = "";
            DISSECTOR_ASSERT(FALSE);
        }

        proto_tree_add_none_format(field_table_tree, hf_amqp_field, tvb,
            field_start, offset - field_start, "%s (%s): %s", name, typename,
            value);
    }
}

/*  Dissection routine for AMQP frames  */

static void
dissect_amqp_frame(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
{
    proto_item *ti;
    proto_item *amqp_tree;
    proto_item *args_tree;
    proto_item *prop_tree;
    size_t length;
    int offset;

    if (check_col(pinfo->cinfo, COL_PROTOCOL))
        col_set_str(pinfo->cinfo, COL_PROTOCOL, "AMQP");
    if (check_col(pinfo->cinfo, COL_INFO)) {
        col_clear(pinfo->cinfo, COL_INFO);
    }

    if (tree) {

        /*  Heuristic - protocol initialisation frame starts with 'AMQP'  */
        if (tvb_get_guint8(tvb, 0) == 'A' &&
              tvb_get_guint8(tvb, 1) == 'M' &&
              tvb_get_guint8(tvb, 2) == 'Q' &&
              tvb_get_guint8(tvb, 3) == 'P') {

            if (check_col(pinfo->cinfo, COL_INFO)) {
                col_append_str(pinfo->cinfo, COL_INFO, "Protocol-Header ");
                col_set_fence(pinfo->cinfo, COL_INFO);
            }

            ti = proto_tree_add_item(tree, proto_amqp, tvb, 0, -1, FALSE);
            amqp_tree = proto_item_add_subtree(ti, ett_amqp_init);
            proto_tree_add_item(amqp_tree, hf_amqp_init_protocol, tvb, 0, 4, FALSE);
            proto_tree_add_item(amqp_tree, hf_amqp_init_id_major, tvb, 4, 1, FALSE);
            proto_tree_add_item(amqp_tree, hf_amqp_init_id_minor, tvb, 5, 1, FALSE);
            proto_tree_add_item(amqp_tree, hf_amqp_init_version_major, tvb, 6, 1, FALSE);
            proto_tree_add_item(amqp_tree, hf_amqp_init_version_minor, tvb, 7, 1, FALSE);

            return;
        }
        
        ti = proto_tree_add_item(tree, proto_amqp, tvb, 0, -1, FALSE);
        amqp_tree = proto_item_add_subtree(ti, ett_amqp);
        proto_tree_add_item(amqp_tree, hf_amqp_type, tvb, 0, 1, FALSE);
        proto_tree_add_item(amqp_tree, hf_amqp_channel, tvb, 1, 2, FALSE);
        proto_tree_add_item(amqp_tree, hf_amqp_length, tvb, 3, 4, FALSE);
        length = tvb_get_ntohl(tvb, 3);
        switch (tvb_get_guint8(tvb, 0)) {
        case AMQP_FRAME_TYPE_METHOD:
            proto_tree_add_item(amqp_tree, hf_amqp_method_class_id,
                tvb, 7, 2, FALSE);
            switch (tvb_get_ntohs(tvb, 7)) {
.for class
            case AMQP_CLASS_$(class.name:c,upper):
                proto_tree_add_item(amqp_tree, hf_amqp_method_$(class.name:c)_method_id,
                    tvb, 9, 2, FALSE);              
                ti = proto_tree_add_item(amqp_tree, hf_amqp_method_arguments,
                    tvb, 11, length - 4, FALSE);
                args_tree = proto_item_add_subtree(ti, ett_args);
                switch (tvb_get_ntohs(tvb, 9)) {
.    for method
                case AMQP_METHOD_$(class.name:c,upper)_$(method.name:c,upper):
                    offset = dissect_amqp_method_$(class.name:c)_$(method.name:c)(tvb,
                        11, tvb_length (tvb), args_tree);
                    if (check_col(pinfo->cinfo, COL_INFO)) {
                        col_append_fstr(pinfo->cinfo, COL_INFO,
                            "$(class.name:neat).$(method.name:neat) ");
                        col_set_fence(pinfo->cinfo, COL_INFO);
                    }
                    break;
.    endfor
                default:
                    DISSECTOR_ASSERT(FALSE);
                }
                break;
.endfor
            default:
                DISSECTOR_ASSERT(FALSE);
            }
            break;
        case AMQP_FRAME_TYPE_CONTENT_HEADER:
            proto_tree_add_item(amqp_tree, hf_amqp_header_class_id,
                tvb, 7, 2, FALSE);
            proto_tree_add_item(amqp_tree, hf_amqp_header_weight,
                tvb, 9, 2, FALSE);
            proto_tree_add_item(amqp_tree, hf_amqp_header_body_size,
                tvb, 11, 8, FALSE);
            proto_tree_add_item(amqp_tree, hf_amqp_header_property_flags,
                tvb, 19, 2, FALSE);
            ti = proto_tree_add_item(amqp_tree, hf_amqp_header_properties,
                tvb, 21, length - 14, FALSE);
            prop_tree = proto_item_add_subtree(ti, ett_props);
            offset = 21;
            switch (tvb_get_ntohs(tvb, 7)) {
.for class where count (field) > 0
            case AMQP_CLASS_$(class.name:c,upper):
                offset = dissect_amqp_content_header_$(class.name:c)(tvb,
                    offset, tvb_length (tvb), prop_tree);
                break;
.endfor
            default:
                DISSECTOR_ASSERT(FALSE);
            }
            if (check_col(pinfo->cinfo, COL_INFO)) {
                col_append_str(pinfo->cinfo, COL_INFO, "Content-Header ");
                col_set_fence(pinfo->cinfo, COL_INFO);
            }
            break;
        case AMQP_FRAME_TYPE_CONTENT_BODY:
            proto_tree_add_item(amqp_tree, hf_amqp_payload,
                tvb, 7, length, FALSE);
            if (check_col(pinfo->cinfo, COL_INFO)) {
                col_append_str(pinfo->cinfo, COL_INFO, "Content-Body ");
                col_set_fence(pinfo->cinfo, COL_INFO);
            }
            break;
        case AMQP_FRAME_TYPE_HEARTBEAT:
            if (check_col(pinfo->cinfo, COL_INFO)) {
                col_append_str(pinfo->cinfo, COL_INFO, "Heartbeat ");
                col_set_fence(pinfo->cinfo, COL_INFO);
            }
            break;
        default:
            DISSECTOR_ASSERT(FALSE);
        }
    }
}

.for class
.    for method
/*  Dissection routine for method $(class.name:neat).$(method.name:neat)  */

static size_t
dissect_amqp_method_$(class.name:c)_$(method.name:c)(tvbuff_t *tvb _U_,
    int offset _U_, int bound _U_, proto_tree *args_tree _U_)
{
.if count (field, field.type ? amqp->domain (name = field.domain).type = "table") > 0
    proto_item *ti;
.endif
.        bitoffset = 1
.        for field
.            add_field ("method_$(class.name:c)_$(method.name:c)", "args_tree")
.        endfor
    return offset;
}

.    endfor
.endfor

.for class where count (field) > 0
/*  Dissection routine for content headers of class $(class.name)  */

static size_t
dissect_amqp_content_header_$(class.name:c)(tvbuff_t *tvb,
    int offset, int bound, proto_tree *prop_tree)
{
    proto_item *ti;
    guint16 prop_flags;

    prop_flags = tvb_get_ntohs(tvb, 19);
.    bitoffset = 1
.    for field
.        type = field.type ? amqp->domain (name = field.domain).type
    if (prop_flags & 0x8000) {
.            add_field ("header_$(class.name:c)", "prop_tree")
    }
    prop_flags <<= 1;
.    endfor

    return offset;
}
.endfor

/*  Setup of field format array  */

static hf_register_info hf[] = {
    {&hf_amqp_type, {
        "Type", "amqp.type",
        FT_UINT8, BASE_DEC, VALS(amqp_frame_types), 0x0,
        "Frame type", HFILL}},
    {&hf_amqp_channel,{
        "Channel", "amqp.channel",
        FT_UINT16, BASE_DEC, NULL, 0x0,
        "Channel ID", HFILL}},
    {&hf_amqp_length, {
        "Length", "amqp.length",
        FT_UINT32, BASE_DEC, NULL, 0x0,
        "Length of the frame", HFILL}},
    {&hf_amqp_method_class_id, {
        "Class", "amqp.method.class",
        FT_UINT16, BASE_DEC, VALS(amqp_method_classes), 0x0,
        "Class ID", HFILL}},
.for class
    {&hf_amqp_method_$(class.name:c)_method_id, {
        "Method", "amqp.method.method",
        FT_UINT16, BASE_DEC, VALS(amqp_method_$(class.name:c)_methods), 0x0,
        "Method ID", HFILL}},
.endfor
    {&hf_amqp_method_arguments, {
        "Arguments", "amqp.method.arguments",
        FT_NONE, BASE_NONE, NULL, 0x0,
        "Method arguments", HFILL}},
.for class
.    for method
.        bitoffset = 1
.        for field
.           add_field_format ("method_$(class.name:c)_$(method.name:c)", "arguments")
.        endfor
.    endfor
.endfor
    {&hf_amqp_field, {
        "AMQP", "amqp",
        FT_NONE, BASE_NONE, NULL, 0,
        "AMQP", HFILL}},
    {&hf_amqp_header_class_id, {
        "Class ID", "amqp.header.class",
        FT_UINT16, BASE_DEC, VALS(amqp_method_classes), 0,
        "Class ID", HFILL}},
    {&hf_amqp_header_weight, {
        "Weight", "amqp.header.weight",
        FT_UINT16, BASE_DEC, NULL, 0,
        "Weight", HFILL}},
    {&hf_amqp_header_body_size, {
        "Body size", "amqp.header.body-size",
        FT_UINT64, BASE_DEC, NULL, 0,
        "Body size", HFILL}},
    {&hf_amqp_header_property_flags, {
        "Property flags", "amqp.header.property-flags",
        FT_UINT16, BASE_HEX, NULL, 0,
        "Property flags", HFILL}},
    {&hf_amqp_header_properties, {
        "Properties", "amqp.header.properties",
        FT_NONE, BASE_NONE, NULL, 0x0,
        "Message properties", HFILL}},
.for class
.    bitoffset = 1
.    for field
.        add_field_format ("header_$(class.name:c)", "properties")
.    endfor
.endfor
    {&hf_amqp_payload, {
        "Payload", "amqp.payload",
        FT_BYTES, BASE_NONE, NULL, 0,
        "Message payload", HFILL}},
    {&hf_amqp_init_protocol, {
        "Protocol", "amqp.init.protocol",
        FT_STRING, BASE_NONE, NULL, 0,
        "Protocol name", HFILL}},
    {&hf_amqp_init_id_major, {
        "Protocol ID Major", "amqp.init.id_major",
        FT_UINT8, BASE_DEC, NULL, 0,
        "Protocol ID major", HFILL}},
    {&hf_amqp_init_id_minor, {
        "Protocol ID Minor", "amqp.init.id_minor",
        FT_UINT8, BASE_DEC, NULL, 0,
        "Protocol ID minor", HFILL}},
    {&hf_amqp_init_version_major, {
        "Version Major", "amqp.init.version_major",
        FT_UINT8, BASE_DEC, NULL, 0,
        "Protocol version major", HFILL}},
    {&hf_amqp_init_version_minor, {
        "Version Minor", "amqp.init.version_minor",
        FT_UINT8, BASE_DEC, NULL, 0,
        "Protocol version minor", HFILL}}
};

/*  Setup of protocol subtree array  */

static gint *ett [] = {
     &ett_amqp,
     &ett_args,
     &ett_props,
     &ett_field_table,
     &ett_amqp_init
};

/*  Basic registration functions  */

void
proto_register_amqp(void)
{
    proto_amqp = proto_register_protocol(
        "Advanced Message Queueing Protocol", "AMQP", "amqp");
    proto_register_field_array(proto_amqp, hf, array_length(hf));
    proto_register_subtree_array(ett, array_length(ett));
    prefs_register_protocol(proto_amqp, proto_reg_handoff_amqp);
}

void
proto_reg_handoff_amqp(void)
{
    dissector_add("tcp.port", amqp_port,
        create_dissector_handle(dissect_amqp, proto_amqp));
}
.close
