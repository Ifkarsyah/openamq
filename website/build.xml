<page name = "build">
<language name = "en">
<title>Building from source</title>
<subtitle>building openamq from source</subtitle>
<content>

Requirements
============

 - a POSIX box with ANSI C compiler, or
 - a Win32 box with MSVC/6 or MSVC/7
 - zip or tar and gunzip

The packages has been qualified for Linux, Windows 2000+ Sun Solaris.
Your milage will vary on other POSIX boxes.

The .tar.gz packages and .zip packages are identical except that the
text files they contain are formatted for POSIX and Windows
respectively.  You can convert line endings using zip (-l and -a
options) but we suggest you simply unpack the appropriate file.

Files
=====

To build OpenAMQ one has to first install a set of tools to build it

   - foreign  ex: foreign-1.1d2-src.tar.gz
   - base     ex: base-1.2d1-src.tar.gz
   - gsl4     ex: gsl-4.0c18-src.tar.gz

After these are installed you can compile OpenAMQ from the sourcekit.

   - openamq  ex: OpenAMQ-1.0c1.tar.gz


Setting up your environment to build OpenAMQ
============================================

All our tools refer to a common $IBASE directory. So it is required
that you choose a location for these files. This is done by setting
it in your environment, like so:

   export IBASE="/path/to/ibase"

Since the toolchain also includes executables, you should also include
the 'bin' dir in your ibase dir to your path, like so:

   export PATH=$IBASE/bin:$PATH

Next is the $BOOM_MODEL setting, but it is not mandatory. If you don't
set it, it will default to "mt,release". Have a look at the possible
settings:

   - mt: multithreaded
   - st: singlethreaded (ie: no threading)
   - debug: compile with debug information
   - release: compiles w/o debug information

You can combine these settings, as long as they are not mutually
exclusive. So for example, "mt,release", "st,debug" and "st,release"
are valid examples whereas "mt,st" is invalid.

If you do not know what to pick, just don't set it, defaults will do
fine, and you can still recompile your build with other settings. If
you do pick a model, set it like so:

   export BOOM_MODEL="mt,release"


Building and installing the bootstrap packages
==============================================

First, we need to build and install foreign, assuming you've set up
your environment like described above, use the following steps to
build and install it. Note your version might differ, that's ok.

   tar zxvf foreign-1.1d2-src.tar.gz
   cd foreign-1.1d2
   sh boomake build install

To check if your installed package works, one should be able to use
'c' from the commandline. This also ensures your PATH is setup
correctly.

Next is the base package.

   tar zxvf base-1.2d1-src.tar.gz
   cd base-1.2d1
   sh boomake build install

To check that your base package has been installed correctly, try to
use 'boom' on the command line.

And finally the gsl package.

   tar zxvf gsl-4.0c18-src.tar.gz
   cd gsl-4.0c18
   sh boomake build install

To check that your gsl package has been installed correctly, try to
use 'gsl' on the command line.


Building and installing OpenAMQ
===============================

Since you might have skipped reading up until here, we provide you
with a bit of redundant information to see if your environment is
setup correctly:

   echo $IBASE [should contain a valid path]
   echo $PATH [should contain /path/to/ibase/bin]
   echo $BOOM_MODEL [might be set, ensure this is correct]

Once you've asserted these environment variables are setup correctly,
start building the OpenAMQ package.

   tar zxvf OpenAMQ-1.0c1.tar.gz
   cd OpenAMQ-1.0c1
   sh build.sh

Once building is done, you should be able to start 'amq_server' on
the command line

Upgrading OpenAMQ
=================

If you are upgrading OpenAMQ, you might not need to rebuild the
bootstrap packages again. This depends on wether the update is minor
or major. So read the ChangeLog and README files that comes with the
sourcekit.

Details
=======

Under Win32 the MS C/C++ compiler must be configured for command-line
use.  During MSVC installation, make sure you register the environment
variables needed for command-line use of the compiler.  Check the
vcvars32.bat script for correctness.  When you open a console box, the
MSVCDir variable must point correctly to the MSVC application
directory.
You can set this in the system environment variables.

Requires some C99 functionality, may not build on older C compilers.








Source kits
***********

The .tar.gz package and .zip packages are identical except that
the text files they contain are formatted for POSIX and Win32
respectively.  You can convert line endings using zip (-l and -a
options) but we suggest you simply unpack the appropriate file.

POSIX - Linux, Solaris, Unix
****************************

Requirements
============

 - Solaris 8 or later, or Linux 2.4 or later
 - GNU development tools: tar, gunzip, make, gcc, ar

Building from the Source Package
================================

Select an installation directory.  For instance, $HOME.
This is where the compiled/linked programs will be installed.
We call this the IBASE directory.

After detarring, change to the freshly created directory and
run this command:

    configure --with-ibase=IBASE-DIRECTORY

Alternatively, define an environment variable 'IBASE' with
this directory as its value, and then run 'configure':

    configure

Now build using this command:

    make

Installing the Server and Clients
=================================

Install into the IBASE directory using this command:

    make install

Windows 32
**********

Requirements
============

 - MSVC 6.x or later configured for command-line compilation
 - A standard unzip tool (note: WinZip does not handle the supplied
   tar.gz files correctly).

Under Win32 the MS C/C++ compiler must be configured for command-line
use.  During MSVC installation, make sure you register the environment
variables needed for command-line use of the compiler.  Check the
vcvars32.bat script for correctness.  When you open a console box, the
MSVCDir variable must point correctly to the MSVC application directory.
You can set this in the system environment variables.

Select an installation directory.  For instance, C:\Home.
This is where the compiled/linked programs will be installed.
We call this the IBASE directory.

After unzipping, change to the freshly created directory and
run this command:

    configure --with-ibase=IBASE-DIRECTORY

Alternatively, define an environment variable 'IBASE' with
this directory as its value, and then run 'configure':

    configure

Now build using this command:

    nmake

Installing the Server and Clients
=================================

Install into the IBASE directory using this command:

    nmake install

Installed Components
********************

All installed components are placed under the IBASE directory;
you can delete the OpenAMQ installation by deleting this directory.
The working directory used during building is not needed to run
OpenAMQ.

The IBASE directory has these subdirectories:

 - openamq/server - the OpenAMQ server along with a demo configuration
 - openamq/clients - the OpenAMQ clients
 - openamq/tests - a set of regression tests
 - bin - tools
 - lib - libraries, including the OpenAMQ client API libraries
 - include - C header files, including the OpenAMQ client API headers
 - doc - all available project documentation


Testing your Server Installation
********************************

We are still preparing the regression test suite.  In the meantime:

 - Go to the IBASE/openamq/server directory and run openamqd.

 - In a second window, go to the IBASE/openamq/clients/stdc directory and
   run amqpcli_serial.  This sends 1000 messages to a queue on the
   server and reads them back.

</content>
</language>
</page>
