.#   Java chassis template

.targetDir = "../../openamq/clients/java3/generated/java/org/openamq/client/framing"
.directory.create (targetDir)

.for class by index
.    for method
.        javaClassName = getJavaClassName("$(class.Name)$(method.Name)Body")
.        open_output ("$(targetDir)/$(javaClassName).java")
package org.openamq.client.framing;

import org.apache.mina.common.ByteBuffer;

/**
 * This class is autogenerated
 * Do not modify.
 * @author GSL
 * @author Code Generator Script by mark.atwell@jpmorgan.com and robert.j.greig@jpmorgan.com
 */
public class $(javaClassName) extends $(method.framingSuperclass) implements EncodableAMQDataBlock
{
.        for field by index where !field.global
 public $(field.jtype:no) $(field.jname:no);
.        endfor

protected byte getClazz()
{
    return $(class.index);
}
   
protected byte getMethod()
{
    return $(method.index);
}


/** unsigned short */
protected int getBodySize()
{
return
.        size = 0
.        for field where !field.global
            $(field.encodedSize) +
.        endfor
0;
}

protected void writeMethodPayload(ByteBuffer buffer)
{
.   for field where !field.global
        $(field.encodeMethod)
.   endfor 
}

public void populateMethodBodyFromBuffer(ByteBuffer buffer) throws AMQFrameDecodingException
{
.   for field where !field.global
        $(field.decodeMethod);
.   endfor

}

public String toString()
{
    StringBuffer buf = new StringBuffer(super.toString());
.   for field where !field.global
        buf.append("\\n\\t$(field.jname:no): ").append(String.valueOf($(field.jname:no)));
.   endfor    
    return buf.toString();
}

public static AMQFrame createAMQFrame(short channelId 
.   for field where !field.global
,$(field.jtype:no) $(field.jname:no)
.   endfor
)
{
    $(javaClassName) body = new $(javaClassName)();
.   for field where !field.global
    body.$(field.jname:no) = $(field.jname:no);
.   endfor
    AMQFrame frame = new AMQFrame();
    frame.channel = channelId;
    frame.bodyFrame = body;
    return frame;
}
}
.    endfor
.endfor
.close

.  javaClassName = "MethodBodyDecoderRegistry"
.  open_output ("$(targetDir)/$(javaClassName).java")
package org.openamq.client.framing;

import java.util.Map;
import java.util.HashMap;
import org.apache.log4j.Logger;
import org.openamq.client.AMQException;

/**
 * This class is autogenerated
 * Do not modify.
 * @author GSL
 * @author Code Generator Script by mark.atwell@jpmorgan.com and robert.j.greig@jpmorgan.com
 */

public final class $(javaClassName)
{
private static final Logger _log = Logger.getLogger($(javaClassName).class);

private static final Map _classMethodProductToMethodBodyMap = new HashMap();

static
{
.for class by index
.    for method
. decoderClassName = getJavaClassName("$(class.Name)$(method.Name)Body")
. magicNumber = class.index * 1000 + method.index
_classMethodProductToMethodBodyMap.put(new Integer($(magicNumber)), $(decoderClassName).class);
.    endfor
.endfor
}

public static AMQMethodBody get(byte clazz, byte method) throws AMQFrameDecodingException
{
	Class bodyClass = (Class) _classMethodProductToMethodBodyMap.get(new Integer(clazz * 1000 + method));
	if (bodyClass != null)
	{
	    try
	    {
	        return (AMQMethodBody) bodyClass.newInstance();
	    }
	    catch (Exception e)
	    {
	    	throw new AMQFrameDecodingException(_log, "Unable to instantiate body class for class " + clazz + " and method " + method + ": " + e, e);
	    }
	}
	else
	{
	    throw new AMQFrameDecodingException(_log, "Unable to find a suitable decoder for class " + clazz + " and method " + method);
	}    
}
}