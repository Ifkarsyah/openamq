<?xml?>
<!--
    The Object Property Framework
    Yet Another Production from The iMatix Industrial Bit Factory

    OPF generates classes that provide a management framework for
    object properties. A typical use is for configuration data.

    Copyright (c) 2007 iMatix Corporation

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or (at
    your option) any later version.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    For information on alternative licensing for OEMs, please contact
    iMatix Corporation.
-->

<opf
    name    = "amq_client_config"
    comment = "client configuration properties"
    script  = "opf_gen"
    root    = "config"
    config  = "amq_wireapi.cfg"
    >

<public>
extern $\(selftype)
    *amq_client_config;                 //  Global properties object
</public>

<private>
$\(selftype)
    *amq_client_config = NULL;          //  Global properties
</private>

<path name = "tuning">
    <property name = "tcp nodelay" type = "Bool" default = "1" dynamic = "1">
    TCP/IP NODELAY option
    <doc>
    If this value is 1, socket data is written immediately, which is
    usually good for latency.  If this value is 0, data is buffered
    until there is a full packet, which is usually good for throughput.
    </doc>
    </property>

    <property name = "tcp rcvbuf" type = "int" default = "0" dynamic = "1">
    TCP/IP receive buffer, in bytes
    <doc>
    If this value is greater than zero, the connection to the server will
    use the specified value.  Note: setting this value is delicate, do not
    use this option unless you know what you are doing.
    </doc>
    </property>

    <property name = "tcp sndbuf" type = "int" default = "0" dynamic = "1">
    TCP/IP send buffer, in bytes
    <doc>
    If this value is greater than zero, the connection to the server will
    use the specified value.  Note: setting this value is delicate, do not
    use this option unless you know what you are doing.
    </doc>
    </property>

    <property name = "high water" type = "int" default = "0">
    High water mark for message flow control
    <doc>
    Number of messages in arrived queue when message flow from server is stopped.
    If this property is 0, message flow is never switched off.
    </doc>
    </property>

    <property name = "low water" type = "int" default = "0">
    Low water mark for message flow control
    <doc>
    Number of messages in arrived queue when message flow from server is
    started again after it had been switched off on high water mark.
    </doc>
    </property>

    <property name = "direct" type = "int" default = "0">
    Enables Direct Mode for connections
    <doc>
    If set to 1, new connections will by default use Direct Mode.  Applications
    can override this by setting the connection->direct property on new connections.
    </doc>
    </property>
</path>

<path name = "direct">
    <property name = "batching" type = "int" max = "2097152" default = "32768">
    Maximum size of Direct Mode batches
    <doc>
    Defines the maximum batch size for Direct Mode opportunistic batching on message
    sends.  Setting this higher will improve throughput, and usually with lower latency, 
    but will cause higher memory consumption.  Setting this to zero will switch off 
    batching.  Any value less than 2048 is treated as zero.
    </doc>
    </property>

    <property name = "on overflow" type = "icl_shortstr_t" default = "trim">
    Sets action for high-water overflow
    <doc>
    Specifies how the WireAPI stack should handle an overflow condition, as defined by
    the arrived message queue reaching the high-water mark.  The allowed actions are:
    'warn' - issue a message to the console, 'trim' - discard old messages to make space
    for new ones, 'drop' - drop new incoming messages, and 'kill' - assert an error and
    kill the application.
    </doc>
    </property>
</path>

<!-- These sections are allowed but ignored -->
<path name = "server" />
<path name = "resources" />
<path name = "logging" />
<path name = "internal" />
<path name = "queue_profile" />
<path name = "security" />

</opf>
