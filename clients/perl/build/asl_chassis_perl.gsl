.#   Perl chassis template

.target_dir = "AMQP/Framing/Frames"
.target_module = string.replace(target_dir, "/|::")
.directory.create (target_dir)

.for class by index
.    for method
.        perl_module_name = get_perl_module_name("$(class.Name)$(method.Name)")
.        open_output ("$(target_dir:)/$(perl_module_name:).pm")
#!/usr/bin/perl
# $(perl_module_name:).pm

# Generated from amq.asl by asl_chassis_perl.gsl using GSL/4.
# DO NOT MODIFY THIS FILE.

package $(target_module:)::$(perl_module_name:);

use strict;
use warnings;

# Constructor
sub new($$) {
    my $class = ref($_[0]) || $_[0];
    my $self = bless {}, $class;

    $self->{'codec'} = $_[1];

    $self;
}

# Accessors
sub amqp_class_id() {
    $(class.index);
}

sub amqp_method_id() {
    $(method.index);
}

.for field by index where !field.global
sub $(field.name:c)($;$) {
    my ($self, \$$(field.name:c)) = @_;
    my $old_$(field.name:c) = undef;

    if (\$$(field.name:c)) {
        $old_$(field.name:c) = $self->{'$(field.name:c)'};
        $self->{'$(field.name:c)'} = \$$(field.name:c);

        $old_$(field.name:c);
    } else {
        $self->{'$(field.name:c)'};
    }
}

.endfor

sub body_size($) {
    $self = shift;
.fsize = 0
.vsize = ""
.for field where !field.global
.   fsize += field.fixed_size
.endfor
.for field where !field.global
.    if defined(field.variable_size)
.   vsize += " +\n        $(field.variable_size)"
.    endif
.endfor

    $(fsize:)$(vsize);
}

# Marshalling
sub write_method($) {
    my $self = shift;

.for field where !field.global
.    if defined(field.encode_method)
    $(field.encode_method:);
.    endif
.endfor
}

sub read_method($) {
    my $self = shift;

.for field where !field.global
.    if defined(field.decode_method)
    $(field.decode_method:);
.    endif
.endfor
}

sub print($$) {
    my $self = shift;
    my $HANDLE = shift;

.for field where !field.global
    $HANDLE->printf("\\n\\t$(field.name:c): %s", "\$self->{'$(field.name:c)'}");
.endfor
}

1;
.       close
.    endfor
.endfor

.perl_module_name = "MainFrameRegistry"
.open_output ("$(target_dir:)/$(perl_module_name:).pm")
#!/usr/bin/perl
# $(perl_module_name:).pm

# Generated from amq.asl by asl_chassis_perl.gsl using GSL/4.
# DO NOT MODIFY THIS FILE.

package AMQP::Framing::Frames::$(perl_module_name:);

use strict;
use warnings;

sub new() {
    my $class = ref($_[0]) || $_[0];
    my $registry = {};

.for class by index
.    for method
.        method_name = get_perl_module_name("$(class.Name)$(method.Name)")
.        magic_number = class.index * 1000 + method.index
    $registry{$(magic_number)} = "$(target_module:)::$(method_name:)";
.    endfor
.endfor

    bless $registry, $class;
}

1;
.close
