#----------------------------------------------------------------------------
#   Dialog data and code block - do not modify this code by hand
#   Generated by LIBERO 2.4 on 31 Aug, 2006,  9:54.
#   Schema file used: lrschema.pl
#----------------------------------------------------------------------------

#-- Symbolic constants and event numbers ------------------------------------

$LR_STATE_after_init = 0;
$LR_STATE_connection_opening = 1;
$LR_STATE_connection_opened = 2;
$LR_STATE_connection_closed = 3;

$terminate_event = -1;                  # Halts the dialog
$LR_NULL_EVENT = -2;
$connection_close_event = 0;
$connection_close_ok_event = 1;
$connection_finished_event = 2;
$connection_open_ok_event = 3;
$connection_tune_event = 4;
$ok_event = 5;
$protocol_initiation_ok_event = 6;

#-- Standard subroutines used by dialog interpreter -------------------------

sub raise_exception {
    local ($event) = @_;
    $the_exception_event = $event;
    $exception_raised = 1;
}

sub LR_initialise {
    $LR_nextst = "";
    $LR_nextst .= "3000010";
    $LR_nextst .= "3000201";
    $LR_nextst .= "3302000";
    $LR_nextst .= "0030000";

    $LR_action = "";
    $LR_action .= "2000010";
    $LR_action .= "2000403";
    $LR_action .= "2605000";
    $LR_action .= "0070000";

    $LR_module = "";
    $LR_module .= "12" . "0";
    $LR_module .= "3" . "0";
    $LR_module .= "42" . "0";
    $LR_module .= "562" . "0";
    $LR_module .= "72" . "0";
    $LR_module .= "8" . "0";
    $LR_module .= "9" . "0";

    $LR_offset [1] = 0;
    $LR_offset [2] = 3;
    $LR_offset [3] = 5;
    $LR_offset [4] = 8;
    $LR_offset [5] = 12;
    $LR_offset [6] = 15;
    $LR_offset [7] = 17;
}

#-- Dialog interpreter starts here ------------------------------------------

$feedback = 0;                          #   Main program feedback
$LR_state = 0;                          #   First state is always 0
&LR_initialise;                         #   Initialise static strings
&initialise_the_program;
while ($the_next_event != $terminate_event)
  {
    $LR_event = $the_next_event;
    $LR_event < 0 || $LR_event >= 7 && die
        "State ", $LR_state,
        " - event ", $LR_event, " is out of range\n";
    $LR_index = ($LR_state * 7 + $LR_event) * 1;
    $LR_index = substr ($LR_action, $LR_index, 1);
    $LR_savest = $LR_state;

        $LR_index == 0 && die
            "State ", $LR_state,
            " - event ", $LR_event, " is not accepted\n";
    $the_next_event = $LR_NULL_EVENT;
    $the_exception_event = $LR_NULL_EVENT;
    $exception_raised = 0;

    #   Execute module list for state transition, 0 indicates end of list
    $LR_vecptr = $LR_offset [$LR_index];
    $LR_modnbr = substr ($LR_module, $LR_vecptr * 1, 1);
    while ($LR_modnbr > 0 && !$exception_raised)
      {
          {                             #   Execute the module
            $LR_modnbr == 1 && do { &send_protocol_initiation; last; };
            $LR_modnbr == 2 && do { &expect_frame; last; };
            $LR_modnbr == 3 && do { &connection_close_ok; last; };
            $LR_modnbr == 4 && do { &connection_start_ok; last; };
            $LR_modnbr == 5 && do { &connection_tune_ok; last; };
            $LR_modnbr == 6 && do { &connection_open; last; };
            $LR_modnbr == 7 && do { &connection_open_ok_handler; last; };
            $LR_modnbr == 8 && do { &connection_closed; last; };
            $LR_modnbr == 9 && do { &cleanup; last; };
          }
        $LR_vecptr++;
        $LR_modnbr = substr ($LR_module, $LR_vecptr * 1, 1);
      }

    #   Handle exception if any was raised
    if ($exception_raised)
      {
        $the_exception_event == $LR_NULL_EVENT ||
            ($LR_event = $the_exception_event);

        $the_next_event = $LR_event;
      }
    else
      {
        $LR_index = ($LR_state * 7 + $LR_event) * 1;
        $LR_state = substr ($LR_nextst, $LR_index, 1);
      }
    if ($the_next_event == $LR_NULL_EVENT)
      {
        &get_external_event;
        $the_next_event == $LR_NULL_EVENT && die
            "No event set after event ", $LR_event,
            " in state ", $LR_state, "\n";
      }
  }
exit ($feedback);
