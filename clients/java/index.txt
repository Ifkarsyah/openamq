gdl
    title     = JavaFramingAPI
    subtitle  = Java Framing API Documentation
    product   = OpenAMQ
    author    = iMatix Corporation <amq@imatix.com>
    date      = 2005/03/21
    copyright = Copyright (c) 2004 JPMorgan
    version   = 0.1
end gdl

Cover
*****

State of this Document
======================

Distribution of this document is currently limited to iMatix and JPMorgan
 internal use.

This document describes a work in progress.

Copyright Notice
================

This document is copyright (c) 2004 JPMorgan Inc.

Authors
=======

This document was written by Gustavo Broos <gustavo@imatix.com>.

Abstract
========

Overview of the Java framing API for AMQP/Fast.

Introduction
************

Package summary
=================

The com.imatix.openamq.framing package provides a base level communications
layer for AMQP/Fast client or server applications coded in Java. The package
provides classes for network serialization/deserialization of connection, 
channel and handle protocol commands. A factory class glues all this command
classes together, providing object instantiation from the network; this utility 
class enforces current protocol parameters. Message body input and output is 
possible via filtered streams. The provided streams can write from/read to
memory available to the application, while simple fragmentation/defragmentation
is handled transparently. Out-of-band messages will be possible in future 
versions, by passing of additional dedicated input/output streams. The package
supports loading/storing of field tables through a provided class which is 
similar in spirit to the Java Properties class. Methods for reading and writing
unsigned values up to integers are provided. Since Java does not provide 
primitive unsigned types, then AMQP integer values must be stored in memory 
into types of greater capacity than the protocol specifies; in Java spirit, 
moving those values from memory to network is runtime-checked for 
underflows/overflows. This API can be used to impement higher-level client or
server APIs.

The provided framing API can be used to:
- Write unsigned values during connection initiation
- Send and receive command frames  
- Send message bodies as data streams
- Read and write field tables
- Dump to console the data traffic

Design Proposal
***************

Definitions and References
==========================

1. AMQ_RFC006
2. The Java Language Specification
3. JavaTM 2 Platform Standard Edition API Specification

Objectives
==========

The framing API has for objectives:
- Java 1.4.x compatibility
- Follow the existing Java design patterns closely but not strictly
- A clear object oriented structure
- Good balance between maintainable and optimized code
- Reliable socket timeouts for reading and writing

Architecture
============

Desing elements
---------------

A framing factory
    Hands instances of network-serialized objects. Enforces protocol parameters.
    Provides various utility methods.
Message input streams    
    Allows traffic of big or out-of-band messages. Java will not directly
    allow 4GB memory arrays (|2| §15.10), but a server can use streams to 
    segment incoming data. 
Bucket encoding/decoding
    Simple communication between the main thread and the I/O ones. Faster for
    serving topics.    
Underflow / Overflow and other runtime checks
    Makes programming errors less probable.
Inner class command sub-types
    Organization without resorting to fragmenting the package. Supporting the
    structure of the framing factory. You need a connection object first before
    having any connection frames. 
Filling of command parameters via public variables
    Forces to write ("document") the name of the value being set.
    
Class overview diagram
----------------------

|AMQFramingFactory|                     /* Utility for framable classes      */

|AMQConnection|                         /* Utility for connection commands   */

|AMQChannel|                            /* Utility for channel commands      */

|AMQHandle|                             /* Utility for handle commands       */

|AMQMessage|                            /* Utility for the message class     */

|AMQFramable|                           /* Superclass for network objects    */
  |
  +---|AMQMessage.Head|                 /* Message head object               */
  |
  +---|AMQFrame|                        /* Superclass of command frames      */
        |        
        +---|AMQConnection.Frame|       /* Connection commands superclass    */
        |     |    
        |     +---|AMQConnection.Challenge| /* Connection challenge class    */
        |     |        
        |     +---|AMQConnection.Response|  /* Connection response class     */
        |     |        
        |     +---|AMQConnection.Tune|      /* Connection tune class         */
        |     |        
        |     +---|AMQConnection.Open|      /* Connection open class         */
        |     |         
        |     +---|AMQConnection.Ping|      /* Connection ping class         */
        |     |        
        |     +---|AMQConnection.Reply|     /* Connection reply class        */
        |     |        
        |     +---|AMQConnection.Close|     /* Connection close class        */
        |  
        +---|AMQChannel.Frame|          /* Channel commands superclass       */
        |     |        
        |     +---|AMQChannel.Open|         /* Channel open class            */
        |     |   
        |     +---|AMQChannel.Ack|          /* Channel ack class             */
        |     |   
        |     +---|AMQChannel.Commit|       /* Channel commit class          */
        |     |   
        |     +---|AMQChannel.Rollback|     /* Channel rollback class        */
        |     |   
        |     +---|AMQChannel.Reply|        /* Channel reply class           */
        |     |   
        |     +---|AMQChannel.Close|        /* Channel close class           */
        |        
        +---|AMQHandle.Frame|           /* Handle commands superclass        */
              |
              +---|AMQHandle.Open|          /* Handle open class             */
              |        
              +---|AMQHandle.Send|          /* Handle send class             */
              |        
              +---|AMQHandle.Consume|       /* Handle consume class          */
              |        
              +---|AMQHandle.Cancel|        /* Handle cancel class           */
              |        
              +---|AMQHandle.Flow|          /* Handle flow class             */
              |        
              +---|AMQHandle.Unget|         /* Handle unget class            */
              |        
              +---|AMQHandle.Query|         /* Handle query class            */
              |        
              +---|AMQHandle.Browse|        /* Handle browse class           */
              |        
              +---|AMQHandle.Created|       /* Handle created class          */
              |        
              +---|AMQHandle.Notify|        /* Handle notify class           */
              |        
              +---|AMQHandle.Index|         /* Handle index class            */
              |        
              +---|AMQHandle.Prepare|       /* Handle prepare class          */
              |         
              +---|AMQHandle.Ready|         /* Handle ready class            */
              |        
              +---|AMQHandle.Reply|         /* Handle reply class            */
              |        
              +---|AMQHandle.Close|         /* Handle close class            */
        
|FilterOutputStream|        
        |                               /* Message body output stream        */
        |        
        +---|AMQFramingFactory.MessageBodyOutputStream|  

|FilterInputStream|        
        |                               /* Message body Input stream         */
        |        
        +---|AMQFramingFactory.MessageBodyInputStream| 

|AMQFieldTable|                         /* Field table name/value pairs      */

|AMQFramingException|                   /* Provisional general exception     */

|AMQFramingIOException|                 /* Needed for the provided streams   */

Class summary
=============

AMQFramingFactory
-----------------
This class concentrates most of the methods for framing functionality. A client
or server layer built on top of the framing code will use this class mainly.
This class handles creation, serialization and deserialization of protocol 
objects and primitive data types. This class manages low-level network issues 
such as read retries, socket timeouts, etc. This is the place where most AMQP 
negotiated parameters will be held, and where checking of frame level session 
correctness will be performed (frame sizes, heartbeats, transaction limits, 
coherence of the values on passed objects (when possible), etc.).

AMQConnection
-------------
This class packs connection-type commands as inner classes. The inner classes
are manipulated through factory-like methods which are meant to support the 
AMQFramingFactory's functionality. This class provides a common functional
layer for its inner types. You can use the AMQFramingFactory to ease the use of
AMQConnection objects. See the description for AMQFrame.

AMQChannel
----------
This class packs channel-type commands as inner classes. The inner classes
are manipulated through factory-like methods which are meant to support the 
AMQFramingFactory's functionality. This class provides a common functional
layer for its inner types. You can use the AMQFramingFactory to ease the use of
AMQChannel objects. See the description for AMQFrame.

AMQHandle
---------
This class packs handle-type commands as inner classes. The inner classes
are manipulated through factory-like methods which are meant to support the 
AMQFramingFactory's functionality. This class provides a common functional
layer for its inner types. You can use the AMQFramingFactory to ease the use of
AMQHandle objects. See the description for AMQFrame.

AMQMessage
----------
This class represents a message head network object. This object is an 
exception to the bucket source rule, it is read directly from the incoming
stream (the containing fragment may be to big to fit in memory). You can use
the AMQFramingFactory to ease the use of AMQMessage objects. See the 
description for AMQFramable.

AMQFramable
-----------
This class is the superclass for serializable/deserializable protocol objects.
The message header is not a full command frame, but it is nonetheless framable.
Every command frame is a network framable object.

AMQFrame
--------
This class is the superclass for all protocol command frames. All the objects
of this class have a specific type which is read on deserialization. You can 
use the AMQFramingFactory to ease the use of AMQFrame objects.

AMQFieldTable
-------------
This class is modeled closely after the Java Properties object; it contains 
name/value pairs which can be read from or written to network as AMQP field
tables. A set of get/put methods for the field table types specified in 
AMQ_RFC006 are provided.

Exception summary
=================

AMQFramingException
-------------------
This is a provisional general exception which is thrown for framing errors,
protocol or implementation-specific alike.

AMQFramingIOException
---------------------
This class extends IOException, so it is possible to throw it from overloaded 
stream methods. The code should be revised to throw this when it clarifies,
in the context of the AMQ implementation, some of the IOExceptions that Java 
may throw.

Class details
=============

AMQFramingFactory
-----------------
    
public boolean verbose
......................
Governs console output of execution information.
Should be refined to an integer value.

public AMQFramingFactory(Socket socket)
.......................................
This constructs an AMQFramingFactory object with the input streams provided
by the socket. The socket provides the timeout parameter enforced for network 
write operations (currently we rely on SUN's documented behavior |3| for read
and accept timeouts).

Parameters
    socket - Network connection to use.
Throws
    IOException - If network stream wrapping for buffering, etc. fails.

public AMQFramingFactory(Socket socket, int readBuff, int writeBuff)
....................................................................
This constructs an AMQFramingFactory object with the input streams provided
by the socket wrapped around by specific values for buffering. See also the 
other constructor.

Parameters
    socket - Network connection to use.
    readBuff - Requested size for input buffer.
    writeBuff - Requested size for output buffer.
Throws
    IOException - If network stream wrapping for buffering, etc. fails.

public void setTuneParameters(AMQConnection.Tune tune)
......................................................
Sets connection tune parameters from a connection tune object. The parameters should
not be changed after the connection tune negotiation has been completed, or runtime
errors will be thrown.

Parameters
    tune - Connection tune object, provides parameters on field tables.
Throws
    IOException - If the proposed FRAME_MAX is too small.

public long getFrameMax()
......................... 
Gets the current FRAME_MAX value that was read from the tune parameters.

Returns
    The FRAME_MAX value that is currently effective.
    
public void setIncomingRetryLatency(int latency)
................................................
Sets the amount of milliseconds to wait when data is expected but not yet 
arriving. The default is currently 100 ms.

Parameters
    latency - Time in milliseconds.
    
public void flush()
...................
Asks to the writer thread to flush any buffered data.

Throws 
    IOException - If the configured timeout elapses.
    
public byte[] consumeData(int len)
..................................
This function reads data from the socket's input stream. A bytes array of size
len is allocated and entirely filled with data from the network. See the base 
consumer function.

Parameters
    len - How much bytes to read.
Returns
    Allocated memory with the data read.
Throws
    IOException - Exceptions from the underlying input streams.
    
public void consumeData(byte[] bytes)
.....................................
This function reads data from the socket's input stream. The bytes array is
entirely filled with data from the network. See the base consumer function.

Parameters
    bytes - Allocated memory for storing the data read.
Throws
    IOException - Exceptions from the underlying input streams.
    
public void consumeData(byte[] bytes, int off, int len)
.......................................................
This function reads data from the socket's input stream. See the base consumer
function.

Parameters
    bytes - Allocated memory for storing the data read.
    off - Where to start copying data into the bytes array.
    len - How much data to read.
Throws
    IOException - Exceptions from the underlying input streams.
    
public void consumeData(InputStream is, byte[] bytes, int off, int len)
.......................................................................
Base data consumer function. This functions handles data reading from the 
network, low-level details are abstracted at this point and will only show up 
if exceptions take place from below.

Parameters
    is - Where to read data from.
    bytes - Allocated memory for storing the data read.
    off - Where to start copying data into the bytes array.
    len - How much data to read.
Throws
    IOException - Exceptions from the underlying input streams.
    
public void produceData(byte[] bytes)
.....................................
This function writes data to the socket's output stream. The bytes array will
be fully written to the network. See the base producer function.

Parameters
    bytes - Data to be written to the network.
Throws
    IOException - Exceptions from the underlying output streams.
    
public void produceData(byte[] bytes, int off, int len)
.......................................................
This function writes data to the socket's output stream. See the base producer
function.

Parameters
    bytes - Data to be written to the network.
    off - Where to start copying data from the bytes array.
    len - How much data to write.
Throws
    IOException - Exceptions from the underlying output streams.
    
public void produceData(ByteArrayOutputStream baos)
...................................................
This function writes data to the socket's output stream. See the base producer
function.

Parameters
    baos - Data to be written to the network.
Throws
    IOException - Exceptions from the underlying output streams.
    
public void produceData(OutputStream os, byte[] bytes, int off, int len)
........................................................................
Base data producer function. This functions handles data writing to the 
network, low-level details are abstracted at this point and will only show up
if exceptions take place from below.
    
Parameters
    os - Where to write data.
    bytes - Data to be written to the network.
    off - Where to start copying data from the bytes array.
    len - How much data to write.
Throws
    IOException - Exceptions from the underlying output streams.

public long readUnsignedInt()
.............................
Reads four bytes from the network and promotes to long discarding the sign.
The returned value is a long containing the unsigned value represented by
the four bytes read from the network.

Returns
    The unsigned value represented by the four bytes read from the network.
Throws
    IOException - Exceptions from the underlying output streams.

public void writeUnsignedInt(long value)
........................................
Checks that the long value passed can be represented as a four bytes unsigned
integer, then writes the bytes to the network. A runtime exception is thrown
if the check fails.

Parameters
    value - A long containing the unsigned value represented by four bytes.
Throws
    IOException - Exceptions from the underlying output streams.

public int readUnsignedShort()
..............................
Reads two bytes from the network and promotes to int discarding the sign.
The returned value is an int containing the unsigned value represented by
the two bytes read from the network.

Returns
    The unsigned value represented by the two bytes read from the network.
Throws
    IOException - Exceptions from the underlying output streams.

public void writeUnsignedShort(int value)
.........................................
Checks that the int value passed can be represented as a two bytes unsigned
integer, then writes the bytes to the network. A runtime exception is thrown
if the check fails.

Parameters
    value - An int containing the unsigned value represented by two bytes.
Throws
    IOException - Exceptions from the underlying output streams.

public short readUnsignedByte()
...............................
Reads one byte from the network and promotes to short discarding the sign.
The returned value is a short containing the unsigned value represented by
the byte read from the network.

Returns
    The unsigned value represented by the byte read from the network.
Throws
    IOException - Exceptions from the underlying output streams.

public void writeUnsignedByte(short value)
..........................................
Checks that the short value passed can be represented as a one byte unsigned
integer, then writes one byte to the network. A runtime exception is thrown
if the check fails.

Parameters
    value - A short containing the unsigned value represented by one byte.
Throws
    IOException - Exceptions from the underlying output streams.
        
public InputStream getMessageBodyInputStream(AMQHandle.Notify hnFirst, AMQMessage.Head head, InputStream is, boolean prepared) 
..............................................................................................................................
This returns an InputStream for reading a message body. The first handle notify
and the head for the message must be supplied. If the passed input stream is
null, in-band message consumption will take place. Copies the destName variable
in the last handle notify received to the provided hnFirst.

Parameters
    hnFirst - The handle notify that anounced the message.
    head - The message head.
    is - From where to read the data.
    prepared - Was this message prepared with a handle prepare?
Returns
    An InputStream for the message body.    

public OutputStream getMessageBodyOutputStream(AMQHandle.Send hsFirst, AMQMessage.Head head, OutputStream os, boolean prepared)
...............................................................................................................................
This returns an OutputStream for writing a message body. The first handle send 
and the head for this message must be supplied. If the passed output stream is
null, in-band message production will take place. Uses the destName variable 
from the provided hsFirst for the last handle send. Sends fragments of the size
specified in hsFirst.fragmentSize. 
   
Parameters
    hsFirst - The handle send that anounced the message.
    head - The message head.
    os - Where to write the data.
    prepared - Was this message prepared with a handle prepare?
Returns
    An OutputStream for the message body.
Throws
    IOException - Trying to send and oversized fragment.    
    IOException - In hsFirst, partial is false but fragment is too big.
    
public AMQMessage.Head createMessageHead()
..........................................
Create a new message head object. The object variables should be configured, and
then the produceMessageHead method can be used to send the object through the
network.

Returns
    An empty message head object.

public AMQMessage.Head consumeMessageHead() 
...........................................
Get a message header object from the network.

Throws 
    AMQFramingException - Cannot decode the frame.

public void produceMessageHead($(class_prefix:)Message.Head head) 
.................................................................
Send a message head object through the network.

Throws  
    IOException - Exceptions from the underlying output streams.

public AMQFrame createFrame(short type)
.......................................
Creates an empty object for a given frame type. The object variables should be
configured, and then the produceFrame method can be used to send the 
object through the network.

Returns
    An empty command frame object of the requested type.
Throws 
    AMQFramingException - Unknown frame type.

public AMQFrame consumeFrame() throws AMQFramingException, IOException 
..............................
Get a command frame object from the network.

Throws 
    AMQFramingException - Cannot decode the frame.
    AMQFramingException - Frame of incorrect size was rejected.
    IOException - Exceptions from the underlying input streams.

public void produceFrame(AMQFrame frame) throws AMQFramingException, IOException 
........................................
Send a command frame object through the network.

Throws 
    AMQFramingException - Frame of incorrect size was rejected.
    IOException - Exceptions from the underlying output streams.

final public static long u(int value) 
.....................................
Convert to unsigned (int to long). Use if a lower level is needed than the 
one provided by the unsigned read/write methods.

Parametrs
    value - A signed int value.
Returns
    A long containing the unsigned representation of the four bytes from the int.

final public static int s(long value)
.....................................
Check if the passed long can be packed as a four bytes unsigned value, for 
network traversal. Use if a lower level is needed than the one provided by
the unsigned read/write methods.

Parametrs
    value - A long value.
Returns
    A signed int encapsulating four bytes representing an unsigned integer.

final public static int u(short value)
...................................... 
Convert to unsigned (short to int). Use if a lower level is needed than the 
one provided by the unsigned read/write methods.

Parametrs
    value - A signed short value.
Returns
    An int containing the unsigned representation of the two bytes from the short.

final public static short s(int value)
...................................... 
Check if the passed int can be packed as a four bytes unsigned value, for 
network traversal. Use if a lower level is needed than the one provided by
the unsigned read/write methods.

Parametrs
    value - An int value.
Returns
    A signed short encapsulating two bytes representing an unsigned integer.

final public static short u(byte value) 
.......................................
Convert to unsigned (byte to short). Use if a lower level is needed than the 
one provided by the unsigned read/write methods.

Parametrs
    value - A signed byte value.
Returns
    A short containing the unsigned representation of the byte value.

final public static byte s(short value)
.......................................
Check if the passed short can be packed as a one byte unsigned value, for 
network traversal. Use if a lower level is needed than the one provided by
the unsigned read/write methods.

Parametrs
    value - A short value.
Returns
    A signed byte encapsulating one byte representing an unsigned integer.
    
public static String hexDump(byte[] bytes)
..........................................
Returns a string with the elements of the given byte array as hexadecimal
values.

Parameters
    bytes - The byte array to format to hexadecimal.
Returns
    A hexadecimal representation of the array.
    
public static String bytes2String(byte[] bytes) 
...............................................
Encodes a byte array as a short string. The current encoding method is UTF-8.

Parameters
    bytes - The byte array to encode as a short string.
Returns
    The resulting string.
     
public static byte[] string2Bytes(String string)
................................................ 
Encodes a short string as an array. The current encoding method is UTF-8.

Parameters
    string - The short string to encode as a byte array.
Returns
    The resulting byte array.

public static void warning(String _class, String method, String message) 
........................................................................
Standard way for printing warning messages to console.

Parameters
    class - Originating class.
    method - Originating method.
    message - Descriptive message for the warning.

public static void exception(Exception e, String _class, String method, String message)
.......................................................................................
Standard way for throwing checked exceptions from the framing code.

Parameters
    e - Java exception information.
    class - Originating class.
    method - Originating method.
    message - Descriptive message for the warning.

Throws 
    AMQFramingException - The framing exception we are willing to throw.

public static void runtimeException(Exception e, String _class, String method, String message)
..............................................................................................
Standard way for throwing checked exceptions from the framing code.

Parameters
    e - Java exception information.
    class - Originating class.
    method - Originating method.
    message - Descriptive message for the warning.
 
Throws 
    RuntimeException  - The runtime exception we are willing to throw.
        
AMQConnection
-------------
    
public final static short CHALLENGE
...................................
Challenge frame type. Used for requesting new connection challenge objects.

public final static short RESPONSE
..................................
Response frame type. Used for requesting new connection response objects.

public final static short TUNE
..............................
Tune frame type. Used for requesting new connection tune objects.

public final static short OPEN
..............................
Open frame type. Used for requesting new connection open objects.

public final static short PING
..............................
Ping frame type. Used for requesting new connection ping objects.

public final static short REPLY
...............................
Reply frame type. Used for requesting new connection reply objects.

public final static short CLOSE
...............................
Close frame type. Used for requesting new connection close objects.

public class Challenge extends Frame 
------------------------------------
AMQConnection inner class for challenge frames. Extends the AMQConnection.Frame
abstract class.

public short    version;                /*  Negotiated protocol version      */
public String   mechanisms;             /*  Available security mechanisms    */
public byte[]   challenges;             /*  Challenge fields                 */

public class Response extends Frame 
-----------------------------------
AMQChannel inner class for response frames. Extends the AMQConnection.Frame
abstract class.

public String   mechanism;              /*  Selected security mechanism      */
public byte[]   responses;              /*  Response fields                  */

public class Tune extends Frame 
-------------------------------
AMQChannel inner class for tune frames. Extends the AMQConnection.Frame
abstract class.

public byte[]   options;                /*  Tuning options                   */
public byte[]   dictionary;             /*  Client-supplied dictionary       */

public class Open extends Frame 
-------------------------------
AMQChannel inner class for open frames. Extends the AMQConnection.Frame
abstract class.

public int      confirmTag;             /*  Confirmation tag                 */
public String   virtualPath;            /*  Virtual server path              */
public String   clientName;             /*  Client identifier                */
public byte[]   options;                /*  Connection options               */

public class Ping extends Frame 
-------------------------------
AMQChannel inner class for ping frames. Extends the AMQConnection.Frame
abstract class.

public boolean  respond;                /*  Please respond                   */

public class Reply extends Frame 
--------------------------------
AMQChannel inner class for reply frames. Extends the AMQConnection.Frame
abstract class.

public int      confirmTag;             /*  Confirmation tag                 */
public int      replyCode;              /*  Reply code                       */
public String   replyText;              /*  Reply text                       */

public class Close extends Frame 
--------------------------------
AMQChannel inner class for close frames. Extends the AMQConnection.Frame
abstract class.

public int      replyCode;              /*  Reply code                       */
public String   replyText;              /*  Reply text                       */

AMQChannel
----------

public final static short OPEN
.............................
Open frame type. Used for requesting new channel open objects.

public final static short ACK
............................
Ack frame type. Used for requesting new channel ack objects.

public final static short COMMIT
...............................
Commit frame type. Used for requesting new channel commit objects.

public final static short ROLLBACK
.................................
Rollback frame type. Used for requesting new channel rollback objects.

public final static short REPLY
..............................
Reply frame type. Used for requesting new channel reply objects.

public final static short CLOSE
..............................
Close frame type. Used for requesting new channel close objects.

public class Open extends Frame 
-------------------------------
AMQChannel inner class for open frames. Extends the AMQChannel.Frame
abstract class.

public int      channelId;              /*  Channel number                   */
public int      confirmTag;             /*  Confirmation tag                 */
public boolean  transacted;             /*  Transaction mode                 */
public boolean  restartable;            /*  Restartable mode                 */
public byte[]   options;                /*  Channel options                  */
public String   outOfBand;              /*  Out of band options              */

public class Ack extends Frame 
------------------------------
AMQChannel inner class for ack frames. Extends the AMQChannel.Frame
abstract class.

public int      channelId;              /*  Channel number                   */
public int      confirmTag;             /*  Confirmation tag                 */
public long     messageNbr;             /*  Message reference                */

public class Commit extends Frame 
---------------------------------
AMQChannel inner class for commit frames. Extends the AMQChannel.Frame
abstract class.

public int      channelId;              /*  Channel number                   */
public int      confirmTag;             /*  Confirmation tag                 */
public byte[]   options;                /*  Transaction options              */

public class Rollback extends Frame 
-----------------------------------
AMQChannel inner class for rollback frames. Extends the AMQChannel.Frame
abstract class.

public int      channelId;              /*  Channel number                   */
public int      confirmTag;             /*  Confirmation tag                 */
public byte[]   options;                /*  Transaction options              */

public class Reply extends Frame 
--------------------------------
AMQChannel inner class for reply frames. Extends the AMQChannel.Frame
abstract class.

public int      channelId;              /*  Channel number                   */
public int      confirmTag;             /*  Confirmation tag                 */
public int      replyCode;              /*  Reply code                       */
public String   replyText;              /*  Reply text                       */

public class Close extends Frame 
--------------------------------
AMQChannel inner class for close frames. Extends the AMQChannel.Frame
abstract class.

public int      channelId;              /*  Channel number                   */
public int      replyCode;              /*  Reply code                       */
public String   replyText;              /*  Reply text                       */

AMQHandle
---------

public final static short OPEN
.............................
Open frame type. Used for requesting new handle open objects.

public final static short SEND
.............................
Send frame type. Used for requesting new handle send objects.

public final static short CONSUME
................................
Consume frame type. Used for requesting new handle consume objects.

public final static short CANCEL
...............................
Cancel frame type. Used for requesting new handle cancel objects.

public final static short FLOW
.............................
Flow frame type. Used for requesting new handle flow objects.

public final static short UNGET
..............................
Unget frame type. Used for requesting new handle unget objects.

public final static short QUERY
..............................
Query frame type. Used for requesting new handle query objects.

public final static short BROWSE
...............................
Browse frame type. Used for requesting new handle browse objects.

public final static short CREATED
................................
Created frame type. Used for requesting new handle created objects.

public final static short NOTIFY
...............................
Notify frame type. Used for requesting new handle notify objects.

public final static short INDEX
..............................
Index frame type. Used for requesting new handle index objects.

public final static short PREPARE
................................
Prepare frame type. Used for requesting new handle prepare objects.

public final static short READY
..............................
Ready frame type. Used for requesting new handle ready objects.

public final static short REPLY
..............................
Reply frame type. Used for requesting new handle reply objects.

public final static short CLOSE
..............................
Close frame type. Used for requesting new handle close objects.

public class Open extends Frame
--------------------------------
AMQHandle inner class for open frames. Extends the AMQHandle.Frame
abstract class.

public int      channelId;              /*  Channel number                   */
public int      handleId;               /*  Handle number                    */
public int      serviceType;            /*  Service type                     */
public int      confirmTag;             /*  Confirmation tag                 */
public boolean  producer;               /*  Request producer access          */
public boolean  consumer;               /*  Request consumer access          */
public boolean  browser;                /*  Request browser access           */
public boolean  temporary;              /*  Request a temporary dest         */
public String   destName;               /*  Default destination name         */
public String   mimeType;               /*  Default MIME type                */
public String   encoding;               /*  Default content encoding         */
public byte[]   options;                /*  Destination options              */

public class Send extends Frame 
-------------------------------
AMQHandle inner class for send frames. Extends the AMQHandle.Frame
abstract class.

public int      handleId;               /*  Handle number                    */
public int      confirmTag;             /*  Confirmation tag                 */
public long     fragmentSize;           /*  Size of following fragment       */
public boolean  partial;                /*  Partial message?                 */
public boolean  outOfBand;              /*  Out of band data?                */
public boolean  recovery;               /*  Restarting large message?        */
public boolean  streaming;              /*  Working in streaming mode?       */
public String   destName;               /*  Destination name suffix          */

public class Consume extends Frame 
----------------------------------
AMQHandle inner class for consume frames. Extends the AMQHandle.Frame
abstract class.

public int      handleId;               /*  Handle number                    */
public int      confirmTag;             /*  Confirmation tag                 */
public int      prefetch;               /*  Max pending messages             */
public boolean  noLocal;                /*  Don't deliver to self?           */
public boolean  unreliable;             /*  Unreliable mode                  */
public String   destName;               /*  Destination name                 */
public String   identifier;             /*  Subscription identifier          */
public byte[]   selector;               /*  Destination selector             */
public String   mimeType;               /*  Selector MIME type               */

public class Cancel extends Frame 
---------------------------------
AMQHandle inner class for cancel frames. Extends the AMQHandle.Frame
abstract class.

public int      handleId;               /*  Handle number                    */
public int      confirmTag;             /*  Confirmation tag                 */
public String   destName;               /*  Destination name suffix          */
public String   identifier;             /*  Subscription identifier          */

public class Flow extends Frame 
-------------------------------
AMQHandle inner class for flow frames. Extends the AMQHandle.Frame
abstract class.

public int      handleId;               /*  Handle number                    */
public int      confirmTag;             /*  Confirmation tag                 */
public boolean  flowPause;              /*  Pause the flow of messages?      */

public class Unget extends Frame 
--------------------------------
AMQHandle inner class for unget frames. Extends the AMQHandle.Frame
abstract class.

public int  handleId;                   /*  Handle number                    */
public int  confirmTag;                 /*  Confirmation tag                 */
public long messageNbr;                 /*  Message reference                */

public class Query extends Frame 
--------------------------------
AMQHandle inner class for query frames. Extends the AMQHandle.Frame
abstract class.

public int      handleId;               /*  Handle number                    */
public long     messageNbr;             /*  Message base                     */
public String   destName;               /*  Destination name suffix          */
public byte[]   selector;               /*  Destination selector             */
public String   mimeType;               /*  Selector MIME type               */

public class Browse extends Frame 
---------------------------------
AMQHandle inner class for browse frames. Extends the AMQHandle.Frame
abstract class.

public int      handleId;               /*  Handle number                    */
public int      confirmTag;             /*  Confirmation tag                 */
public long     messageNbr;             /*  Message reference                */

public class Created extends Frame 
----------------------------------
AMQHandle inner class for created frames. Extends the AMQHandle.Frame
abstract class.

public int      handleId;               /*  Handle number                    */
public String   destName;               /*  Created destination name         */

public class Notify extends Frame 
----------------------------------
AMQHandle inner class for notify frames. Extends the AMQHandle.Frame
abstract class.

public int      handleId;               /*  Handle number                    */
public long     messageNbr;             /*  Message reference                */
public long     fragmentSize;           /*  Size of response fragment        */
public boolean  partial;                /*  Partial message?                 */
public boolean  outOfBand;              /*  Out of band data?                */
public boolean  recovery;               /*  Restarting large message?        */
public boolean  delivered;              /*  Message must be acknowledged?    */
public boolean  redelivered;            /*  Message is being redelivered?    */
public boolean  streaming;              /*  Working in streaming mode?       */
public String   destName;               /*  Originating destination          */

public class Index extends Frame 
----------------------------------
AMQHandle inner class for index frames. Extends the AMQHandle.Frame
abstract class.

public int      handleId;               /*  Handle number                    */
public long     messageNbr;             /*  Message base                     */
public byte[]   messageList;            /*  List of message references       */

public class Prepare extends Frame 
----------------------------------
AMQHandle inner class for prepare frames. Extends the AMQHandle.Frame
abstract class.

public int      handleId;               /*  Handle number                    */
public long     fragmentSize;           /*  Size of message header           */
public String   contentHash;            /*  SHA1 signature for content       */

public class Ready extends Frame 
----------------------------------
AMQHandle inner class for ready frames. Extends the AMQHandle.Frame
abstract class.

public int      handleId;               /*  Handle number                    */
public long     messageSize;            /*  Size of existing data, or zero   */

public class Reply extends Frame 
----------------------------------
AMQHandle inner class for reply frames. Extends the AMQHandle.Frame
abstract class.

public int      handleId;               /*  Handle number                    */
public int      confirmTag;             /*  Confirmation tag                 */
public int      replyCode;              /*  Reply code                       */
public String   replyText;              /*  Reply text                       */

public class Close extends Frame 
----------------------------------
AMQHandle inner class for close frames. Extends the AMQHandle.Frame
abstract class.

public int      handleId;               /*  Handle number                    */
public int      replyCode;              /*  Reply code                       */
public String   replyText;              /*  Reply text                       */

AMQMessage
----------

public class Head extends AMQFramable
-------------------------------------
AMQMessage inner class for message header. Extends the AMQFramable abstract 
class.
 
public long     bodySize;               /*  Message body size                */
public boolean  persistent;             /*  Persistent data?                 */
public short    priority;               /*  Priority 0 (low) to 9 (high)     */
public long     expiration;             /*  Expiration time in UTC seconds   */
public String   mimeType;               /*  Content MIME type                */
public String   encoding;               /*  Content encoding                 */
public String   identifier;             /*  Message identifier               */
public byte[]   headers;                /*  Message headers                  */

AMQFramable
-----------

public byte[] bucket
............................
After encoding, the bucket array will contain this frame's bytes ready for 
sending through the network. Before decoding, this variable should be set to
the raw bytes of a frame read from the network; the type value need not be
present in the bucket since the constructor sets that value automatically.                        

public int encode()
....................
Used to serialize the object for network traversal. The bucket variable gets
allocated.

public int decode()
...............................................
Used to deserialize a frame received from the network. The bucket variable 
is used as input, except for the AMQMessage.Head class.

public void dump();
...................
Prints to console, in human readable format, the contents of the framable object.

AMQFrame
--------

public AMQFrame()
.................
Default constructor. Sets the command type.

public AMQFrame(byte[] bucket) throws AMQFramingException
.........................................................
Decoder constructor. Sets the bucket instance variable, then calls the decode
method.

Throws
    AMQFramingException - The frame could not be decoded (bucket too small, etc.).
    AMQFramingException - Could not get closing command end.

AMQFieldTable
-------------

public AMQFieldTable() 
......................
Default constructor. The resulting object should be filled via the get/put
methods. 

public AMQFieldTable(byte[] bucket) throws AMQFramingException 
..............................................................
Loading constructor. Loads into the underlying hashtable the name/value pairs
encoded in the passed bucket.

Parameters
    bucket - Field table encoded as a byte array.
Throws
    AMQFramingException - Unrecognized field type while loading from bucket.
    AMQFramingException - A field was redefined while loading from bucket.    

public void loadFromBucket(byte[] bucket) throws AMQFramingException 
....................................................................
Loads into the underlying hashtable the name/value pairs
encoded in the passed bucket.

Parameters
    bucket - Field table encoded as a byte array.
Throws
    AMQFramingException - Unrecognized field type while loading from bucket.
    AMQFramingException - A field was redefined while loading from bucket.    

public byte[] storeToBucket() 
.............................
Encodes the name/value pairs from the underlying hashtable into a byte array
to be written to the network.  

Returns
    Name/value pairs encoded as a byte array.

public byte[] getString(String name)
.................................... 
Get a string value by name. If the given name does not correspond to a string
field, a ClassCastException will be thrown.

Parameters
    name - Name of the field to look for.
Returns
    A byte array representation of a long string. Null if the name was not found.

public Object putString(String name, byte[] value) 
..................................................
Put a string field into the underlying hashtable. Returns the previous value if
any, otherwise null.

Parameters
    name - Name for the field.
    value - Long string value.
Returns
    Previous value for that name.

public long getInteger(String name)
................................... 
Get an integer value by name. If the given name does not correspond to an 
integer field, a ClassCastException will be thrown.

Parameters
    name - Name of the field to look for.
Returns
    The value of the integer field. Null if the name was not found.

public Object putInteger(String name, long value) 
.................................................
Put a integer field into the underlying hashtable. Returns the previous value if
any, otherwise null.

Parameters
    name - Name for the field.
    value - Integer value.
Returns
    Previous value for that name.

public long[] getDecimal(String name)
..................................... 
Get a decimal value by name. If the given name does not correspond to a decimal
field, a ClassCastException will be thrown.

Parameters
    name - Name of the field to look for.
Returns
    The decimal part in the first element of the array. The integer part in the
    second element of te array. Null if the name was not found.

public Object putDecimal(String name, long[] value) 
...................................................
Put a decimal field into the underlying hashtable. Returns the previous value if
any, otherwise null.

Parameters
    name - Name for the field.
    value - Decimal part in first element, integer part on second element.
Returns
    Previous value for that name.

public long getDateTime(String name)
.................................... 
Get a date/time value by name. If the given name does not correspond to a 
date/time field, a ClassCastException will be thrown.

Parameters
    name - Name of the field to look for.
Returns
    An integer representing a time_t value with seconds accuracy. Null if the 
    name was not found.

public Object putDateTime(String name, long value) 
..................................................
Put a date/time field into the underlying hashtable. Returns the previous value 
if any, otherwise null.

Parameters
    name - Name for the field.
    value - A time_t value with seconds accuracy.
Returns
    Previous value for that name.

public static String readName(DataInputStream dis) throws IOException 
.....................................................................
Decode a field name from the passed DataInputStream.

Parameters
    dis - Field table data source.
Returns
    A short string value.
Throws
    Any exception generated from the passed dis.    

public static void writeName(DataOutputStream dos, String name) throws IOException 
..................................................................................
Write a field name to the passed DataOutputStream.

Parameters
    dos - Field table encoding target.
    name - A short string value.
Throws
    Any exception generated from the passed dos.    

public static byte[] readString(DataInputStream dis) throws IOException 
....................................................................... 
Read a long string from the passed DataInputStream.

Parameters
    dis - Field table data source.
Returns
    A long string value.
Throws
    Any exception generated from the passed dis.    

public static void writeString(DataOutputStream dos, byte[] bytes) throws IOException
..................................................................................... 
Write a long string to the passed DataOutputStream.

Parameters
    dos - Field table receiving target.
    name - A long string value.
Throws
    Any exception generated from the passed dos.    

public static long readInteger(DataInputStream dis) throws IOException 
......................................................................
Read an integer from the passed DataInputStream.

Parameters
    dis - Field table data source.
Returns
    An integer value.
Throws
    Any exception generated from the passed dis.    

public static void writeInteger(DataOutputStream dos, long aLong) throws IOException  
....................................................................................
Write an integer to the passed DataOutputStream.

Parameters
    dos - Field table receiving target.
    name - A long string value.
Throws
    Any exception generated from the passed dos.    

public static long[] readDecimal(DataInputStream dis) throws IOException 
........................................................................ 
Read a decimal from the passed DataInputStream.

Parameters
    dis - Field table data source.
Returns
    A decimal value.
Throws
    Any exception generated from the passed dis.    

public static void writeDecimal(DataOutputStream dos, long[] decimal) throws IOException
........................................................................................  
Write a decimal to the passed DataOutputStream.

Parameters
    dos - Field table receiving target.
    name - A decimal value.
Throws
    Any exception generated from the passed dos.    

Security Considerations
=======================

This proposal does not have any specific security considerations.

Comments on this Document
*************************

Comments by readers; these comments may be edited, incoporated, or removed
by the author(s) of the document at any time.

Date, name
==========

No comments at present.
