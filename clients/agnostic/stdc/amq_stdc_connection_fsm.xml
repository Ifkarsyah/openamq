<root script = "amq_stdc_fsms">

<machine name = "connection_fsm" output = "amq_stdc_connection_fsm">
    Holds state and additional data associated with CONNECTION

    <constructor action = "do construct"/>
    <destructor action = "do destruct"/>

    <event name = "init">
        Request to open connection
        <arg type = "global_fsm_t" name = "global">
            Global object handle
        </arg>
        <arg type = "dbyte" name = "connection_id">
            Connection id for new connection
        </arg>
        <arg type = "const char *" name = "server">
            Server to connect to
        </arg>
        <arg type = "dbyte" name = "port">
            Server port to use
        </arg>
        <arg type = "const char *" name = "host">
            Virtual host to connect to
        </arg>
        <arg type = "const char *" name = "client_name">
            Client name to use to connect to server
        </arg>
        <arg type = "amq_stdc_table_t" name = "options">
            Options table to be passed to OPEN CONNECTION command
        </arg>
        <arg type = "byte" name = "async">
             When 1, don't wait for confirmation from server
        </arg>
        <arg type = "amq_stdc_lock_t *" name ="lock">
             Output parameter, to be used to wait for operation completion
        </arg>
    </event>
    <event name = "get chunk">
        Used by sender thread to receive next chunk to send
        <arg type = "amq_stdc_lock_t *" name = "lock">
            Out parameter; used by sender thread to wait while next chunk
            is available
        </arg>
    </event>
    <event name = "send chunk">
        Used to send chunks of data tos server via sender thread
        <arg type = "char *" name = "data">
            Chunk to be send by send. Chunk has to be allocated via
            amq_malloc and will be freed by sender thread.
        </arg>
        <arg type = "qbyte" name = "size">
            Number of bytes to send.
        </arg>
        <arg type = "amq_stdc_lock_t *" name = "lock">
            Out parameter; can be used to wait for sending completion;
            if NULL, no lock is created
        </arg>
    </event>
    <event name = "challenge">
        CONNECTION CHALLENGE received from server
        <arg type = "byte" name = "version">
            Version of AMQ protocol proposed by server
        </arg>
    </event>
    <event name = "tune">
        CONNECTION TUNE received from server
    </event>
    <event name = "create channel">
        Request to open new channel within the connection
        <arg type = "byte" name = "transacted">
            If 1, channel will be opened in transacted mode
        </arg>
        <arg type = "byte" name = "restartable">
            If 1, channel will be opened in restartable mode
        </arg>
        <arg type = "amq_stdc_table_t" name = "options">
             Options to be passed to CHANNEL OPEN command
        </arg>
        <arg type = "const char *" name = "out_of_band">
             Specifies how out of band transfer should work
        </arg>
        <arg type = "byte" name = "async">
             When 1, don't wait for confirmation from server
        </arg>
        <arg type = "channel_fsm_t *" name = "out">
             Connection created
        </arg>
        <arg type = "amq_stdc_lock_t *" name = "lock">
             Output parameter, to be used to wait for operation completion
        </arg>
    </event>
    <event name = "remove channel">
        Request to remove channel from connection's list of opened channels
        <arg type = "channel_fsm_t" name = "channel">
             Channel to be removed
        </arg>
    </event>
    <event name = "reply">
        CONNECTION REPLY received
        <arg type = "dbyte" name = "confirm_tag">
            Confirm tag
        </arg>
        <arg type = "dbyte" name = "reply_code">
            Reply code received from server
        </arg>
        <arg type = "dbyte" name = "reply_text_size">
            Size of reply text received from server
        </arg>
        <arg type = "const char *" name = "reply_text">
            Reply text received from server
        </arg>
    </event>
    <event name = "terminate">
        Request to shut down the connection
        <arg type = "amq_stdc_lock_t *" name = "lock">
             Output parameter, to be used to wait for operation completion
        </arg>
    </event>
    <event name = "close">
        CONNECTION CLOSE received from server
    </event>

    <state name = "initial">
        State connection is in before it is physically opened
        <event name = "init" action = "do init" next = "expect challenge"/>
    </state>
    <state name = "expect challenge">
        Socket opened, initiation bytes sent, wating for CONNECTION CHALLENGE
        <event name = "challenge" action = "do challenge" next = "expect tune"/>
    </state>
    <state name = "expect tune">
        Waiting for CONNECTION TUNE from server
        <event name = "tune" action = "do tune" next = "active"/>
    </state>
    <state name = "active">
        Connection is opened and functional
        <event name = "create channel" action = "do create channel"/>
        <event name = "remove channel" action = "do remove channel"/>
        <event name = "reply" action = "do reply"/>
    </state>
    <state name = "expect close">
        Connection is shutting down
        <event name = "terminate" action = "do duplicate terminate"/>
        <event name = "close" action = "do client requested close" next = "terminal"/>
    </state>
    <state name = "terminal">
        Connection is already shut down
    </state>
    <state name = "default">
        Default state
        <event name = "terminate" action = "do terminate" next = "expect close"/>
        <event name = "close" action = "do server requested close" next = "terminal"/>
        <event name = "get chunk" action = "do get chunk"/>
        <event name = "send chunk" action = "do send chunk"/>
    </state>
</machine>

</root>
