<root script = "amq_stdc_fsms">

<machine name = "handle_fsm" output = "amq_stdc_handle_fsm">
    Holds state and additional data associated with HANDLE

    <constructor action = "do construct"/>
    <destructor action = "do destruct"/>

    <event name = "init">
        Request to open handle
        <arg type = "global_fsm_t" name = "global">
            Global object handle
        </arg>
        <arg type = "connection_fsm_t" name = "connection">
            Connection handle belongs to
        </arg>
        <arg type = "channel_fsm_t" name = "channel">
            Channel handle belongs to
        </arg>
        <arg type = "dbyte" name = "connection_id">
            Id of connection handle belongs to
        </arg>
        <arg type = "dbyte" name = "channel_id">
            Id of channel handle belongs to
        </arg>
        <arg type = "dbyte" name = "handle_id">
            Id of this handle
        </arg>
        <arg type = "dbyte" name = "service_type">
            Service type (queue, topic, peer to peer, ...)
        </arg>
        <arg type = "byte" name = "producer">
            If 1, client may produce messages
        </arg>
        <arg type = "byte" name = "consumer">
            If 1, client may consume messages
        </arg>
        <arg type = "byte" name = "browser">
            If 1, client may browse for messages
        </arg>
        <arg type = "const char *" name = "dest_name">
            Destination name
        </arg>
        <arg type = "const char *" name = "mime_type">
            MIME type
        </arg>
        <arg type = "const char *" name = "encoding">
            Content encoding
        </arg>
        <arg type = "amq_stdc_table_t" name = "options">
             Options to be passed to HANDLE OPEN command
        </arg>
        <arg type = "byte" name = "async">
             When 1, don't wait for confirmation from server
        </arg>
        <arg type = "amq_stdc_lock_t *" name = "lock">
             Output parameter, to be used to wait for operation completion
        </arg>
    </event>
    <event name = "init temporary">
        Request to open handle (using temporary destination)
        <arg type = "global_fsm_t" name = "global">
            Global object handle
        </arg>
        <arg type = "connection_fsm_t" name = "connection">
            Connection handle belongs to
        </arg>
        <arg type = "channel_fsm_t" name = "channel">
            Channel handle belongs to
        </arg>
        <arg type = "dbyte" name = "connection_id">
            Id of connection handle belongs to
        </arg>
        <arg type = "dbyte" name = "channel_id">
            Id of channel handle belongs to
        </arg>
        <arg type = "dbyte" name = "handle_id">
            Id of this handle
        </arg>
        <arg type = "dbyte" name = "service_type">
            Service type (queue, topic, peer to peer, ...)
        </arg>
        <arg type = "byte" name = "producer">
            If 1, client may produce messages
        </arg>
        <arg type = "byte" name = "consumer">
            If 1, client may consume messages
        </arg>
        <arg type = "byte" name = "browser">
            If 1, client may browse messages
        </arg>
        <arg type = "const char *" name = "dest_name">
            Destination name
        </arg>
        <arg type = "const char *" name = "mime_type">
            MIME type
        </arg>
        <arg type = "const char *" name = "encoding">
            Content encoding
        </arg>
        <arg type = "amq_stdc_table_t" name = "options">
             Options to be passed to HANDLE OPEN command
        </arg>
        <arg type = "byte" name = "async">
             When 1, don't wait for confirmation from server
        </arg>
        <arg type = "amq_stdc_lock_t *" name = "created_lock">
             Output parameter, to be used to wait for confirmation of
             temporary destination creation
        </arg>
        <arg type = "amq_stdc_lock_t *" name = "lock">
             Output parameter, to be used to wait for operation completion
        </arg>
    </event>
    <event name = "created">
        HANDLE CREATED received from server
        <arg type = "dbyte" name = "dest_name_size">
            Size of temporary destination name
        </arg>
        <arg type = "const char *" name = "dest_name">
            Temporary destination name
        </arg>
    </event>
    <event name = "consume">
        Request to consume data from destination
        <arg type = "dbyte" name = "prefetch">
            Number of messages to prefetch
        </arg>
        <arg type = "byte" name = "no_local">
            If 1, messages sent from this connection won't be received
        </arg>
        <arg type = "byte" name = "unreliable">
            If 1, client won't acknowledge messages
        </arg>
        <arg type = "const char *" name = "dest_name">
            Destination name
        </arg>
        <arg type = "const char *" name = "identifier">
            Durable subsription name
        </arg>
        <arg type = "const char *" name = "selector">
            Selector string
        </arg>
        <arg type = "const char *" name = "mime_type">
            MIME type
        </arg>
        <arg type = "byte" name = "async">
             When 1, don't wait for confirmation from server
        </arg>
        <arg type = "amq_stdc_lock_t *" name = "lock">
             Output parameter, to be used to wait for operation completion
        </arg>
    </event>
    <event name = "send message">
        Request to send message
        <arg type = "byte" name = "out_of_band">
            If 1, message content will be transferred out of band
        </arg>
        <arg type = "byte" name = "recovery">
            If 1, recovery is going on
        </arg>
        <arg type = "byte" name = "streaming">
            If 1, message is a stream
        </arg>
        <arg type = "const char *" name = "dest_name">
            Destination name
        </arg>
        <arg type = "byte" name = "persistent">
            If 1, message is persistent
        </arg>
        <arg type = "byte" name = "priority">
            Message priority 
        </arg>
        <arg type = "qbyte" name = "expiration">
            Message expiration
        </arg>
        <arg type = "const char *" name = "mime_type">
            MIME type
        </arg>
        <arg type = "const char *" name = "encoding">
            Content encoding
        </arg>
        <arg type = "const char *" name = "identifier">
            Message identifier
        </arg>
        <arg type = "apr_size_t" name = "data_size">
            Number of bytes in message body
        </arg>
        <arg type = "void *" name = "data">
            Message body
        </arg>
        <arg type = "byte" name = "async">
             When 1, don't wait for confirmation from server
        </arg>
        <arg type = "amq_stdc_lock_t *" name = "lock">
             Output parameter, to be used to wait for operation completion
        </arg>
    </event>
    <event name = "flow">
        Request to suspend or resume message flow from server
        <arg type = "byte" name = "pause">
             If 1, flow should be suspended, if 0, it should be resumed
        </arg>
        <arg type = "byte" name = "async">
             When 1, don't wait for confirmation from server
        </arg>
        <arg type = "amq_stdc_lock_t *" name = "lock">
             Output parameter, to be used to wait for operation completion
        </arg>
    </event>
    <event name = "cancel">
        Request to cancel persistent subscription
        <arg type = "const char *" name = "dest_name">
            Destination name
        </arg>
        <arg type = "const char *" name = "identifier">
            Durable subscription name
        </arg>
        <arg type = "byte" name = "async">
            When 1, don't wait for confirmation from server
        </arg>
        <arg type = "amq_stdc_lock_t *" name = "lock">
            Output parameter, to be used to wait for operation completion
        </arg>
    </event>
    <event name = "unget">
        Request to push received message back to server
        <arg type = "qbyte" name = "message_nbr">
            Number of message to push back to server
        </arg>
        <arg type = "byte" name = "async">
            When 1, don't wait for confirmation from server
        </arg>
        <arg type = "amq_stdc_lock_t *" name = "lock">
            Output parameter, to be used to wait for operation completion
        </arg>
    </event>
    <event name = "query">
        Request to query server for messages present
        <arg type = "qbyte" name = "message_nbr">
            Query messages with message number greater than this value
        </arg>
        <arg type = "const char *" name = "dest_name">
            Destination name
        </arg>
        <arg type = "const char *" name = "selector">
            Selector string
        </arg>
        <arg type = "const char *" name = "mime_type">
            MIME type
        </arg>
        <arg type = "amq_stdc_lock_t *" name = "lock">
            Output parameter, to be used to wait for operation completion
        </arg>
    </event>
    <event name = "index">
        HANDLE INDEX received from server
        <arg type = "qbyte" name = "message_nbr">
            Last message number received
        </arg>
        <arg type = "qbyte" name = "message_list_size">
            Size of list of message numbers
        </arg>
        <arg type = "const char *" name = "message_list">
            List of message numbers
        </arg>
    </event>
    <event name = "browse">
        Request to browse server for specific message
        <arg type = "qbyte" name = "message_nbr">
             Number of message to browse
        </arg>
        <arg type = "byte" name = "async">
             When 1, don't wait for confirmation from server
        </arg>
        <arg type = "amq_stdc_lock_t *" name = "lock">
             Output parameter, to be used to wait for operation completion
        </arg>
    </event>
    <event name = "terminate">
        Request to shut down the handle
        <arg type = "amq_stdc_lock_t *" name = "lock">
             Output parameter, to be used to wait for operation completion
        </arg>
    </event>
    <event name = "close">
        HANDLE CLOSE received from server
    </event>

    <state name = "initial">
        State handle is in before it is physically opened
        <event name = "init" action = "do init" next = "active"/>
        <event name = "init temporary" action = "do init temporary" next = "expect created"/>
    </state>
    <state name = "expect created">
        In case of opening temporary destination, handle waits in this state
        for confirmation of temporary destination creation
        <event name = "created" action = "do created" next = "active"/>
    </state>
    <state name = "active">
        Handle is opened and functional
        <event name = "consume" action = "do consume"/>
        <event name = "send message" action = "do send message"/>
        <event name = "flow" action = "do flow"/>
        <event name = "cancel" action = "do cancel"/>
        <event name = "unget" action = "do unget"/>
        <event name = "query" action = "do query"/>
        <event name = "index" action = "do index"/>
        <event name = "browse" action = "do browse"/>
    </state>
    <state name = "expect close">
        Handle is shutting down
        <event name = "terminate" action = "do duplicate terminate"/>
        <event name = "close" action = "do client requested close" next = "terminal"/>
    </state>
    <state name = "terminal">
        Handle is already shut down
    </state>
    <state name = "default">
        Default state
        <event name = "terminate" action = "do terminate" next = "expect close"/>
        <event name = "close" action = "do server requested close" next = "terminal"/>
    </state>
</machine>

</root>
