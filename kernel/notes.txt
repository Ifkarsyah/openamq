iCL issues
 - icl loops if class inherits self
    - inheritence unstable
        a->b, b folds after a
        c->a->b, b folds after c but before a
    - e.g. amq_mesgq, search method
 - can't generate abstract classes, 'target not found'
 - enable trace on grammar, icl generation fails with errors
 - footer in child class comes _after_ footer in parent ?! 
 - <data> is not inherited, should be


 - complain if config file is invalid (says nothing)
 - change temporary queue to "mailbox" concept
    - purge at open, optional
    - purge at close, optional
 - move to HUGE values for file/mesg sizes
    - or 64-bit values
 - way to cancel and/or purge a message being sent
    - HANDLE STOP / PURGE command
 
vhost->queues   accept, dispatch
     ->topics   accept
     ->subs     dispatch

    smessage-> topic, queue
    dispatch-> queue, sub


Queues
 - deleting - need to handle extent files as well...
    ... does not appear to create them?

topics
    . load topics from config
        optionally from text file
    . create topic queues at start

restartability

    . refresh virtual hosts
    . create new queues & topics
    . leave connections alive

subscriptions

    . subscription table
    . persistent / non-persistent
    . each subscription is a queue

- amq_server object
    - replaces amq_global
    - runs on a specific port



- move argument parsing & copyright block to standard iPR function




Changes

    rfc006
    fragments
        - allow client to cancel messages using flow/cancel

    client failure
    - failover to secondary server
    - use heartbeat command to check server is alive

    clustering
    - n servers
    - queue + consumers on each server
    - if queue filled & no consumers, messages are forwarded
        - using inter-server MTA
    - if queue empties & consumers, messages are scraped
        - using inter-server MTA
    - separate mechanism for forwarding topics
    - client connection
        - list of ip addresses
        - serial or round robin
        - can be redirected by server
        - can tell server, "no redirect"
    - durable subscriptions
        - may be held on different server, use queue thunking
        - may be allowed for scalability

    multithreading
    - one for smt
    - one for bdb

    clients, priority
    * COM+ for demo
    * C thread-safe
    * Java
    - .NET
    * Perl


Durable Subscriptions
    When server starts up, creates consumer item for all
    durable subscriptions it finds...
        - these are destinations marked as SUBSCRIPTION


Clustering
    a. for resiliency (failure)
        - using master-slave model
        - possibly hierarchical model
    b. for load-balancing
        - using multi-master model
        - possibly hierarchical model
    c. for geographical distribution
        - using other means
        
    - client connects to server
    - server can kick client, with 'reconnect to different server'
    - server provides list of known alternative servers
        - masters and backups
    - client may try servers randomly/serially
        - this is for load-balancing
    - client can connect with 'please don't kick me'
        - if it was already working with that server

    master-slave:
        - agressive heartbeating allows slave to monitor master & vv
        - various strategies for replication
            - repeat all AMQP commands to slave
                - get confirmation before doing own processing thereof
            - repeat internal structures to slave
                - all created objects replicate themselves
            - repeat only stored data
                - messages, subscriptions
       
    
