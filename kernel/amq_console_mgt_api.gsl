.if !defined (switches.quiet)
.   echo "Generating amq_mgt_$(name).icl..."
.endif
.output "amq_mgt_$(name).icl"
<?xml?>
<class
    name      = "amq_mgt_$(name)"
    comment   = "Management console $(name) class"
    version   = "1.0"
    script    = "icl_gen"
    >
<doc>
Implements the management console $(name) object, used by applications
to manage OpenAMQ servers. Use in conjunction with the amq_mgt_console
class.
</doc>

<inherit class = "icl_object">
    <option name = "alloc" value = "cache" />
</inherit>

<import class = "amq_mgt_console" />
.for class
<import class = "amq_mgt_$(name)" />
.endfor

<context>
    amq_client_session_t
        *session;                       //  AMQP session
    int
        id;                             //  Object ID
    Bool
        loaded;                         //  Is object data loaded?
    icl_shortstr_t
        notice;                         //  Message from server
.for field
.   if count (put)
.       class.modifiable = 1
.   endif
.   field.type ?= "string"
.   if type = "string"
    icl_shortstr_t
        $(name);                        //  $(label?'No description')
.   elsif type = "int"
    qbyte
        $(name);                        //  $(label?'No description')
.   elsif type = "bool"
    Bool
        $(name);                        //  $(label?'No description')
.   elsif type = "time"
    time_t
        $(name);                        //  $(label?'No description')
.   endif
.endfor
.for class
.   if repeat ?= 1
    ipr_looseref_list_t
        *$(name)_list;                  //  List of $(name) objects
    ipr_looseref_t
        *$(name)_ref;                   //  Current $(name) position
.   else
    amq_mgt_$(name)_t
        *$(name);                       //  $(label?'No description')
.   endif
.endfor
</context>              

<method name = "new">
    <argument name = "session" type = "amq_client_session_t *">AMQP session</argument>
    <argument name = "id" type = "int">Object ID</argument>
    self->session = session;
    self->id = id;
    self->loaded = FALSE;
.for class where repeat ?= 1
    self->$(name)_list = ipr_looseref_list_new ();
.endfor
</method>

<method name = "destroy">
    s_destroy_children (self);
.for class where repeat ?= 1
    ipr_looseref_list_destroy (&self->$(name)_list);
.endfor
</method>

<method name = "load" template = "function">
    <doc>
    Loads or refreshes the object from the server console. Returns 0
    if the object was refreshed, -1 if there was an error talking to
    the server.
    </doc>
    <local>
    ipr_xml_t
        *xml_root,                      //  Returned response tree
        *xml_cml,                       //  CML item
        *xml_command,                   //  CML command
        *xml_field;                     //  Field item in reply
    char
        *field_name,                    //  Name of returned field
        *field_value;                   //  Value of returned field
.for class where repeat ?= 1
    amq_mgt_$(name)_t
        *$(name);                       //  New $(name) instance
.endfor
    </local>
    //
    //  Send inspect request to console
.if name <> "broker"
    assert (self->id);
.endif
    xml_root = s_request_response (self, "inspect", self->id, NULL, NULL);
    if (xml_root) {
        s_destroy_children (self);
        xml_cml     = ipr_xml_first_child (xml_root);
        xml_command = ipr_xml_first_child (xml_cml);
        xml_field   = ipr_xml_first_child (xml_command);
        ipr_xml_unlink (&xml_cml);
        ipr_xml_unlink (&xml_command);
        
        while (xml_field) {
            field_name  = ipr_xml_attr_get (xml_field, "name", "");
            field_value = ipr_xml_child_value (xml_field);
            if (field_value) {
.for field
.   if !first ()
                else
.   endif
                if (streq (field_name, "$(name)")) {
.   if type = "string"
                    icl_shortstr_cpy (self->$(name), field_value);
.   elsif type = "int" | type = "bool" | type = "time"
                    self->$(name) = (qbyte) atoi (field_value);
.   endif
                }
.endfor
.for class
                else
                if (streq (field_name, "$(name)")) {
.   if repeat ?= 1
                    $(name) = amq_mgt_$(name)_new (self->session, atoi (field_value));
                    ipr_looseref_queue (self->$(name)_list, $(name));
.   else
                    self->$(name) = amq_mgt_$(name)_new (self->session, atoi (field_value));
.   endif
                }
.endfor
                icl_mem_free (field_value);
            }
            xml_field = ipr_xml_next_sibling (&xml_field);
        }
        self->loaded = TRUE;
        ipr_xml_destroy (&xml_root);
    }
    else
        rc = -1;                        //  Object no longer available
</method>

<method name = "print" template = "function">
    <doc>
    Prints the $(name)'s contents to the console.
    </doc>
    <argument name = "xml_data" type = "FILE *">XML data capture</argument>
    //
    if (!self->loaded)
        self_load (self);
    s_list_children (self);
</method>

<method name = "print full" template = "function">
    <doc>
    Prints the $(name)'s values to the console in a two-column list.
    </doc>
    <argument name = "xml_data" type = "FILE *">XML data capture</argument>
    <local>
    icl_shortstr_t
        field_value;
.for field where count (rule, name = "ip address")
    char
        *$(name)_port_pos;
    icl_shortstr_t
        $(name)_host,
        $(name)_ip,
        $(name)_fmt;
.endfor
    </local>
    //
    if (!self->loaded)
        self_load (self);

    icl_console_print (" %d) $(name) = \\\\"%s\\\\" ", self->id, self->name);
.for field where name <> "name"
.   if type = "string"
.       if count (rule, name = "ip address")
    $(name)_port_pos = NULL;
    if (($(name)_port_pos = strchr (self->$(name), ':'))) {
        icl_shortstr_ncpy ($(name)_ip, self->$(name), 
                           $(name)_port_pos - self->$(name));
    } else {
        icl_shortstr_cpy ($(name)_ip, self->$(name));
    }
    ipr_net_lookup_host ($(name)_ip, $(name)_host);
    if (strneq ($(name)_ip, $(name)_host))
        icl_shortstr_fmt ($(name)_fmt, "%s (%s)", $(name)_host, self->$(name));
    else
        icl_shortstr_fmt ($(name)_fmt, self->$(name));
    s_print_property ("$(label)", $(name)_fmt, \
.       else
    s_print_property ("$(label)", *self->$(name)? self->$(name): "(empty)", \
.       endif
.   elsif type = "int"
    sprintf (field_value, "%d", self->$(name));
    s_print_property ("$(label)", field_value, \
.   elsif type = "bool"
    s_print_property ("$(label)", self->$(name)? "Yes": "No", \
.   elsif type = "time"
    ipr_time_iso8601 (self->$(name), ipr_date_format_minute, 0, 0, field_value);
    s_print_property ("$(label)", field_value, \
.   endif
.   if count (put)
"$(name)");
.   else
NULL);
.   endif
.endfor
.for class where repeat ?= 1
    sprintf (field_value, "%d", ipr_looseref_list_count (self->$(name)_list));
    s_print_property ("Number of $(label:lower)", field_value, NULL);
.endfor
.for method
.   if first ()
    icl_console_print ("\
.   endif
 [$(name)]\
.   if last ()
");
.   endif
.endfor
    //  Record data in XML form if wanted
    if (xml_data) {
        fprintf (xml_data, "&lt;$(name) id = \\\\"%d\\\\"\
.for field
.   if type = "string"
 $(name) = \\\\"%s\\\\"\
.   elsif type = "int" | type = "bool"
 $(name) = \\\\"%d\\\\"\
.   elsif type = "time"
 $(name) = \\\\"%s\\\\"\
.   endif
.endfor
/&gt;\\\\n",
            self->id\
.for field
, self->$(name)\
.endfor
);
    }
</method>

<method name = "print row" template = "function">
    <doc>
    Prints the $(name) to the console in a single row.
    </doc>
    <local>
.for field where count (rule, name = "show on summary")
.   if type = "time"
    icl_shortstr_t
        $(name)_str;
.   endif
.   if count (rule, name = "ip address")
    char
        *$(name)_port_pos;
    icl_shortstr_t
        $(name)_host,
        $(name)_ip,
        $(name)_fmt;
.   endif
.endfor
    </local>
    //
.for field where count (rule, name = "show on summary")
.   if type = "time"
    ipr_time_iso8601 (self->$(name), ipr_date_format_minute, 0, 0, $(name)_str);
.   endif
.   if count (rule, name = "ip address")
    $(name)_port_pos = NULL;
    if (($(name)_port_pos = strchr (self->$(name), ':'))) {
        icl_shortstr_ncpy ($(name)_ip, self->$(name), 
                           $(name)_port_pos - self->$(name));
    } else {
        icl_shortstr_cpy ($(name)_ip, self->$(name));
    }
    ipr_net_lookup_host ($(name)_ip, $(name)_host);
    if (strneq ($(name)_ip, $(name)_host))
        icl_shortstr_fmt ($(name)_fmt, "%s (%s)", $(name)_host, self->$(name));
    else
        icl_shortstr_fmt ($(name)_fmt, self->$(name));
.   endif
.endfor
    icl_console_print (" %d) $(name) = \\\\"%s\\\\"\
.for field where count (rule, name = "show on summary")
.   if type = "string"
 $(name)=\\\\"%s\\\\"\
.   elsif type = "int"
 $(name)=%d\
.   elsif type = "bool"
 $(name)=%s\
.   elsif type = "time"
 $(name)=%s\
.   endif
.endfor
    ", self->id, self->name\
.for field where count (rule, name = "show on summary")
.   if type = "string"
.       if count (rule, name = "ip address")
, $(name)_fmt\
.       else
, *self->$(name)? self->$(name): "(empty)"\
.       endif
.   elsif type = "int"
, self->$(name)\
.   elsif type = "bool"
, self->$(name)? "Yes": "No"\
.   elsif type = "time"
, $(name)_str\
.   endif
.endfor
);
</method>

.for class where repeat ?= 1
<method name = "$(name) first" return = "$(name)">
    <doc>
    Locate first $(name) child of $(class.name), returns object reference
    or null.
    </doc>
    <argument name = "self" type = "$\(selftype) *">Current object</argument>
    <declare name = "$(name)" type = "amq_mgt_$(name)_t *">Returned $(name)</declare>
    //
    self->$(name)_ref = ipr_looseref_list_first (self->$(name)_list);
    if (self->$(name)_ref)
        $(name) = self->$(name)_ref->object;
    else
        $(name) = NULL;
</method>

<method name = "$(name) next" return = "$(name)">
    <doc>
    Locate next $(name) child of $(class.name), returns object reference
    or null.  If done after loading object, or after reaching end of list,
    returns first child $(name) (again).
    </doc>
    <argument name = "self" type = "$\(selftype) *">Current object</argument>
    <declare name = "$(name)" type = "amq_mgt_$(name)_t *">Returned $(name)</declare>
    //
    if (self->$(name)_ref)
        self->$(name)_ref = ipr_looseref_list_next (&self->$(name)_ref);
    else
        self->$(name)_ref = ipr_looseref_list_first (self->$(name)_list);

    if (self->$(name)_ref)
        $(name) = self->$(name)_ref->object;
    else
        $(name) = NULL;
</method>

.endfor
<method name = "cmdline" template = "function">
    <doc>
    Implements a command-line interface for the $(name) object.
    </doc>
    <argument name = "path" type = "char *">Current path</argument>
    <argument name = "depth" type = "int">Current depth</argument>
    <argument name = "tokens" type = "ipr_token_list_t *">Automation, if any</argument>
    <argument name = "xml_data" type = "FILE *">XML data capture</argument>
    <local>
    icl_shortstr_t
        command;
.for class
.   if first ()
    icl_shortstr_t
        child_path;
.   endif
.   if repeat ?= 1
    amq_mgt_$(name)_t
        *$(name);                       //  Child $(name)
.   endif
.endfor
    </local>
    //
    self_print_full (self, xml_data);
    s_list_children (self);

    while (TRUE) {
        amq_client_session_wait (self->session, 1);
        if (!self->session->alive) {
            icl_console_print (" Server disconnected - %s", self->session->error_text);
            exit (EXIT_FAILURE);
        }
        //  If we're in autopilot mode, take next command else wait for user
        if (tokens) {
            ipr_token_t
                *token = ipr_token_list_first (tokens);
            if (token) {
                icl_shortstr_cpy (command, token->value);
                ipr_token_destroy (&token);
            }
            else {
                rc = 1;                 //  Signal exit
                break;
            }
        }
        else {
            //  Read command from stdin
            printf ("/%s>", path);
            strclr (command);
            fgets (command, 255, stdin);
            command [strlen (command) - 1] = 0;
        }
        ipr_str_lower (command);
        ipr_str_crop  (command);

        if (streq (command, "")) {
            //  Enter -> refresh and show all
            self_load (self);
            self_print_full (self, xml_data);
            s_list_children (self);
        }
        else
        if (streq (command, "ls") || streq (command, "dir"))
            s_list_children (self);
        else
        if (isdigit (*command)) {
            int
                id = atoi (command);
            Bool
                id_found = FALSE;

            if (id == self->id) {
                self_print_full (self, xml_data);
                id_found = TRUE;
            }
.for class
            if (!id_found) {
.   if repeat ?= 1
                $(name) = self_$(name)_first (self);
                while ($(name)) {
                    if ($(name)->id == id) {
                        icl_shortstr_fmt (child_path, "%s/$(name)", path);
                        rc = amq_mgt_$(name)_cmdline ($(name), child_path, depth + 1, tokens, xml_data);
                        id_found = TRUE;
                    }
                    $(name) = self_$(name)_next (self);
                }
.   else
                if (self->$(name)->id == id) {
                    icl_shortstr_fmt (child_path, "%s/$(name)", path);
                    rc = amq_mgt_$(name)_cmdline (self->$(name), child_path, depth + 1, tokens, xml_data);
                    id_found = TRUE;
                }
.   endif
            }
.endfor
            if (rc == 1                 //  1 means quit completely
            || (rc == 2 && depth))      //  2 means return to top level
                break;                  //  Called cmdline asked for exit
            else
            if (!id_found)
                icl_console_print (" No item number %d in scope.", id);
        }
        else
        if (streq (command, "..") || streq (command, "cd ..")) {
            if (depth)
                break;                  //  Back out
        }
        else
        if (streq (command, "/") || streq (command, "cd /")) {
            if (depth) {
                rc = 2;                 //  Signal back to top
                break;
            }
        }
        else
        if (*command == '?') {          //  Search children for matching text
            //  Not yet implemented
            icl_console_print ("Search is not yet implemented");
        }
        else
        if (ipr_str_prefixed (command, "set"))
.if class.modifiable ?= 1
            s_set_property (self, command);
.else
            icl_console_print (" This object has no modifiable properties");
.endif
        else
.for method
        if (ipr_str_prefixed (command, "$(name)"))
            s_execute_$(name) (self, command);
        else
.endfor
        if (streq (command, "exit") || streq (command, "quit") || streq (command, "q")) {
            rc = 1;                     //  Signal exit
            break;
        }
        else
        if (streq (command, "help"))
            s_show_help ();
        else {
            icl_console_print (" Not a valid command");
            s_show_help ();
        }
    }
</method>

<private name = "header">
static void
    s_destroy_children ($\(selftype) *self);
static ipr_xml_t *
    s_request_response ($\(selftype) *self, char *request, qbyte object_id,
        char *method, asl_field_list_t *fields);
static void
    s_print_property (char *label, char *value, char *name);
.if class.modifiable ?= 1
static void
    s_set_property ($\(selftype) *self, char *command);
.endif
static void
    s_list_children ($\(selftype) *self);
.for method
static void
    s_execute_$(name) ($\(selftype) *self, char *command);
.endfor
static void
    s_show_help (void);
</private>

<private name = "footer">
//  Resets / destroys child objects
static void
s_destroy_children ($\(selftype) *self)
{
.for class where repeat ?= 1
    amq_mgt_$(name)_t
        *$(name);                       //  Old $(name) instance
.   if last ()

.   endif
.endfor
.for class
.   if repeat ?= 1
    while (($(name) = (amq_mgt_$(name)_t *) ipr_looseref_pop (self->$(name)_list)))
        amq_mgt_$(name)_destroy (&$(name));
.   else
    amq_mgt_$(name)_destroy (&self->$(name));
.   endif
.endfor
}

//  Sends a request, returns a response content
static ipr_xml_t *
s_request_response (
    $\(selftype) *self,
    char *request,
    qbyte object_id,
    char *method,
    asl_field_list_t *fields)
{
    amq_content_basic_t
        *content;                       //  Last content sent/recieved
    ipr_bucket_t
        *bucket = NULL;                 //  Message comes here
    icl_shortstr_t
        command;                        //  CML request or reply name
    ipr_xml_t
        *xml_root = NULL,               //  Tree of file we've loaded         
        *xml_cml,                       //  Top level cml item
        *xml_command;                   //  CML command
    char
        *reply_class,                   //  Returned class string
        *reply_status;                  //  Returned status value
    long
        reply_object;                   //  Returned object id

    icl_shortstr_fmt (command, "%s-request", request);
    content = amq_cml_encode (command, "$(name)", object_id, NULL, method, fields);
    amq_content_basic_set_reply_to (content, self->session->queue);
    amq_client_session_basic_publish (self->session,
        content, 0, "amq.system", "amq.console", FALSE, FALSE);
    amq_content_basic_unlink (&content);

    //  Wait for response on our queue
    if (amq_client_session_wait (self->session, 10000) == 0)
        content = amq_client_session_basic_arrived (self->session);

    //  Process response, if any
    if (content) {
        //  TODO: amq_cml_decode
        //  Get content body into a bucket
        bucket = ipr_bucket_new (IPR_BUCKET_MAX_SIZE);
        bucket->cur_size = amq_content_basic_get_body (content, bucket->data, bucket->max_size);
        assert (bucket->cur_size < IPR_BUCKET_MAX_SIZE);
        bucket->data [bucket->cur_size] = 0;

        //  Parse as XML message
        ipr_xml_load_string (&xml_root, bucket->data, FALSE);
        ipr_bucket_unlink (&bucket);
        assert (xml_root);

        //  Check that the result is valid CML
        xml_cml = ipr_xml_first_child (xml_root);
        assert (xml_cml);
        assert (ipr_xml_name (xml_cml));
        assert (streq (ipr_xml_name (xml_cml), "cml"));
        
        //  Check that the response matches our request
        xml_command = ipr_xml_first_child (xml_cml);
        assert (xml_command);
        assert (ipr_xml_name (xml_command));
        
        reply_class  = ipr_xml_attr_get (xml_command, "class",  "");
        reply_status = ipr_xml_attr_get (xml_command, "status", "");
        reply_object = atol (ipr_xml_attr_get (xml_command, "object", ""));
        icl_shortstr_cpy (self->notice, ipr_xml_attr_get (xml_command, "notice", ""));

        if (streq (ipr_xml_name (xml_command), "invalid")) {
            icl_console_print ("E: invalid request sent to console");
            exit (EXIT_FAILURE);
        }
        else
        if (streq (ipr_xml_name (xml_command), "notify"))
            ;   //  Handle notification and loop for next content
        else {
            //  Check that the response is the reply for our object
            icl_shortstr_fmt (command, "%s-reply", request);
            assert (streq (ipr_xml_name (xml_command), command));
            if (streq (reply_status, "ok")) {
                if (strneq (reply_class, "$(name)"))
                    icl_console_print ("E: received OK for '%s', expected '$(name)'", reply_class);
                assert (streq (reply_class, "$(name)"));
                assert (reply_object == self->id);
            }
            else
                //  If command not valid, return NULL
                ipr_xml_destroy (&xml_root);
        }
        amq_content_basic_unlink (&content);
        ipr_xml_unlink (&xml_command);
        ipr_xml_unlink (&xml_cml);
        return (xml_root);
    }
    else {
        icl_console_print ("E: no reply from server - %s", self->session->error_text);
        exit (EXIT_FAILURE);
    }
}

static void
s_print_property (char *label, char *value, char *name)
{
    icl_shortstr_t
        property;

    icl_shortstr_fmt (property, " %s ...", label);
    while (strlen (property) < 40)
        strcat (property, ".");
    strcat (property, " ");
    strcat (property, value);
    if (name) {
        while (strlen (property) < 60)
            strcat (property, " ");
        icl_shortstr_cat (property, "(set ");
        icl_shortstr_cat (property, name);
        icl_shortstr_cat (property, ")");
    }
    icl_console_print (property);
}

.if class.modifiable ?= 1
static void
s_set_property ($\(selftype) *self, char *command)
{
    ipr_token_list_t
        *tokens;
    ipr_token_t
        *token;
    char
        *name  = NULL,
        *value = NULL;
    ipr_xml_t
        *xml_root;                      //  Returned response tree
    asl_field_list_t
        *fields;                        //  Properties of object

    tokens = ipr_token_split (command);
    token = ipr_token_list_first (tokens);
    assert (token);
    if (streq (token->value, "set")) {
        token = ipr_token_list_next (&token);
        if (token) {
            name = token->value;
            token = ipr_token_list_next (&token);
            if (token) {
                value = token->value;
                token = ipr_token_list_next (&token);
                if (token) {
                    icl_console_print (" Data from %s onwards was ignored", token->value);
                    ipr_token_unlink (&token);
                }
            }
        }
    }
    if (name
.   for field where count (put)
    &&  strneq (name, "$(name)")$(last()??')')
.   endfor
        icl_console_print (" Not a valid property name, please check");
    else
    if (name && value) {
        fields = asl_field_list_new (NULL);
        asl_field_new_string (fields, name, value);
        xml_root = s_request_response (self, "modify", self->id, NULL, fields);
        if (xml_root) {
            icl_console_print (" OK - %s", *self->notice? self->notice: "done");
            ipr_xml_destroy (&xml_root);
        }
        asl_field_list_destroy (&fields);
    }
    else
        icl_console_print (" Usage: set propertyname newvalue");

    ipr_token_list_destroy (&tokens);
}

.endif
static void
s_list_children ($\(selftype) *self)
{
.for class where repeat ?= 1
    amq_mgt_$(name)_t
        *$(name);                       //  Child $(name)
.endfor
.for class
.   if first ()
    static Bool
        first_time = TRUE;              //  First time we do a list?

.   endif
.   if repeat ?= 1
    $(name) = self_$(name)_first (self);
    while ($(name)) {
        amq_mgt_$(name)_load ($(name));
        amq_mgt_$(name)_print_row ($(name));
        $(name) = self_$(name)_next (self);
    }
.   else
    if (self->$(name)) {
        amq_mgt_$(name)_load (self->$(name));
        amq_mgt_$(name)_print_row (self->$(name));
    }
.   endif
.   if last ()
    if (first_time) {
        icl_console_print (" Type item number to see details, or [cmd]");
        first_time = FALSE;
    }
.   endif
.endfor
}

.for method
//  Execute $(name) method
//
static void
s_execute_$(name) ($\(selftype) *self, char *command)
{
    ipr_token_list_t
        *tokens;
    ipr_token_t
        *token;
    ipr_xml_t
        *xml_root;                      //  Returned response tree
    asl_field_list_t
        *fields;                        //  Properties of object
    Bool
        is_valid = TRUE;                //  Valid method syntax?
        
    tokens = ipr_token_split (command);
    fields = asl_field_list_new (NULL);

    //  Skip method name, first token in string
    token  = ipr_token_list_first (tokens);
    assert (token);
    
.   for field
    //  Collect $(name) value
    token = ipr_token_list_next (&token);
    if (token)
        asl_field_new_string (fields, "$(name)", token->value);
    else
        is_valid = FALSE;
.   endfor
    if (token)
        ipr_token_unlink (&token);

    if (is_valid) {
        xml_root = s_request_response (self, "method", self->id, "$(name)", fields);
        if (xml_root) {
            icl_console_print (" OK");
            ipr_xml_destroy (&xml_root);
            self_load (self);
            self_print_full (self, NULL);
        }
        else
            icl_console_print (" ERROR");
    }
    else
        icl_console_print (" Usage: $(name) arguments, use 'help $(name)' for details");

    asl_field_list_destroy (&fields);
    ipr_token_list_destroy (&tokens);
}

.endfor
static void
s_show_help (void)
{
    icl_console_print ("");
    icl_console_print (" Command            Has this effect");
    icl_console_print (" -------            -------------------");
    icl_console_print (" ls | dir           Show $(name) and all children");
    icl_console_print (" nnn                Look at item [nnn] (nnn is a number)");
    icl_console_print (" ?text              Look at item matching text");
    icl_console_print (" /                  Return to broker item");
    icl_console_print (" .                  Refresh current item");
    icl_console_print (" ..                 Move back to previous item");
    icl_console_print (" set name value     Set object property");
    icl_console_print (" help               Show this text");
    icl_console_print (" exit | quit        Leave the OpenAMQ shell");
.for method
    icl_console_print ("");
    icl_console_print (" $(name)\
.   for field
 $(label)\
.   endfor
");
.   for doc
    icl_console_print ("     $(.:justify,block                                         )");
.   endfor
.endfor
}
</private>

<method name = "selftest">
</method>

</class>

