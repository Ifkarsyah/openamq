Changes for draft/4

- add join 'type' property, defaults to empty
- default feed type is empty (was "topic")
- default pipe type is empty (was "fifo")
- implement "3/Defaults" profile
    - can we make profiles extensible?
    - or feeds, joins, pipes?
    - POST message to feed results in <message> response
- implement "4/AMQP9" profile
- declare profiles as read-only child of domain
- remove feed property on delivered messages
- amq_server export feeds to zyre
    - what feeds come from OpenAMQ:
        - shared queues -> feedname
        - all exchanges
    - when AMQP provides feed,
        - create in restms object if new
    - always public resource
    - always locked
- xmlns should not be in JSON output
- implement When-Modified-After and When-None-Match
- add JSON parser -> XML tree

restms.pl
- add multiple message support
my $content = <<EOF;
<restms>
  <message address="address.multi.1" message_id="ID1">
    <header name="serial-number" value="0001" />
    <content>It's too cold</content>
  </message>
  <message address="address.multi.2" message_id="ID2">
    <header name="serial-number" value="0002" />
    <content>It's too hot</content>
  </message>
  <message address="address.multi.3" message_id="ID3">
    <header name="message_id" value="ID3" />
    <header name="serial-number" value="0003" />
    <content>It's just right!</content>
  </message>
</restms>
EOF
$restms->raw ("POST", "/restms/feed/default", $content);

Digest-AMQP:
- digest-amqp to use new restms api & examples
- document on restms.org as sample application

Sender-AMQP
- specification to sign messages with App-Id
    - how to set a verifiable App-Id?
    -> server will quash any provided App-Id, so no possibility of fraud
    -> server puts in authenticated user id

Zyre
- implement exchange logic in zyre and do federation
- feed security
    - password on creation
    - provide in posts
- stream profile
- loopback profile
- experimental profiles:
    - try regexp and other stuff on messages
    - how to make this really fast?


Can we make a generic model for feed-join-pipe routing?

feeds are queues with storage options
    - memory
    - disk
    - ring or flat
joins are selectors
    - specify some criteria
pipes are queues with storage and delivery options
    - memory
    - disk
    - streamed or monotonic

        .---- J -> PPPP
FFFFFFFFFF
   '---J -> PPPP

example of air traffic events
    - pull on field match
    - pull on regexp
    - pull on geocoordinates

if we have a bunch of selectors on a queue
    - normalize the selectors so that indentical ones are grouped together
    - we need a way to convert a message into terms
        - then lookup terms in database
        - and then turn that into bitmap of selectors
    -> test with 10k selectors...

Theory of fast message routing on arbitrary selection criteria -> fast routing engine inside Zyre and OpenAMQ.

-> queue before, after
-> route
-> persistence

Slow routing:
    - take message
    - compare with each request in turn

Fast routing
    - take message
    - extract terms
    - for each term, pull up bitmap of requests
    - do logical and/or on bitmaps
    - resulting bitmap = matching requests
    - process in loop starting from random point

What cases can we do fast routing on?
     - strict match on address
         -> each address = lookup of one bitmap
         -> maintenance => locate, set/clear bit
     - strict match on multiple fields
         -> each field = lookup of one bitmap
         -> logical operations between fields (AND?)
         -> maintenance => locate, set/clear bit in all fields
     - topic expression on address
         -> each address = lookup of one bitmap
         -> new topic = recalculate all matching requests
         -> maintenance => locate, set/clear bit in all topics
     - regular expression on address
         -> each address = lookup of one bitmap
         -> new address = recalculate all matching requests
         -> maintenance => locate, set/clear bit in all addresses

We can generalize to any matching function f() on one or more fields in message, indeed to any combination of any matches on a message.

Let us say we have a function F1 that can take a message M and return a set of match terms T1.  For each T we can retrieve and modify a bitmap where each bit B represents one request R, numbered from 0 upwards, within the context of the feed.  Let us say we have a function F2 that takes a request R and returns a set of match terms T2, where each T is a pre-existing term.  Let us further say that the set of match terms is cached between sessions.

For a new R we calculate T2.  For each T in T2 we fetch the bitmap, and set bit B, and store the modified bitmap.  The cost will be proportional to the complexity of R.

For a given M we calculate T1.  For each T in T1 we fetch the bitmap.  If the bitmap does not exist we calculate it as follows: for each existing R we calculate T2, and where T is in T2, we set the bit.  We store the bitmap if created.  We collect all bitmaps and perform a logical AND.  Logical ORs can be performed by creating multiple requests.  The resulting bitmap gives us the set of matching R.

For each deleted R we calculate T2.  For each T in T2 we fetch the bitmap, clear the bit B and store the modified bitmap.

We can consider a modified R to be equivalent to a deleted R and a new R.

The above works for homogeneous requests.  To handle heterogeneous requests we classify F1 and F2 into families.  A request uses one or more families of F2.  Accordingly, the message will invoke only the collection of families used by requests.

... I'd like to build a feed/join/pipe engine that accepts messages in one end and produces them at the other...

